<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>白虎</title>
    <url>/post/life-baihu/</url>
    <content><![CDATA[<p>白虎是我们家的小狗，一只可爱的比熊。</p>
<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>在养狗之前，我说不上讨厌狗，但是绝对说不上喜欢，甚至有些害怕。当初买狗的原因是张思远想养一只宠物，但是并没有确定养什么。一开始有三个选择：猫、狗、兔子。<br>兔子最先被淘汰了，因为总觉得养兔子不会长久。<br>猫很快也被淘汰了，因为我爱人害怕猫。<br>最后选择了狗，虽然我怕狗，但是我的意见并不重要:)。</p>
<p>决定养什么之后，找朋友打听在哪里可以买狗，很快就花了两千块人民币买了一条两个月大小的比熊。<strong>白虎</strong>这个名字是张思远起的，来自于”左青龙，右白虎“。买到家之后才发现味道有些难以忍受，在买来的第一天我基本没怎么看过。第二天之后才好了很多。</p>
<h2 id="大麻烦"><a href="#大麻烦" class="headerlink" title="大麻烦"></a>大麻烦</h2><p>一开始我们就遇到了一个最大的问题：怎么让白虎去规定的地方上厕所。一开始我们没有太在意这个问题，因为它还太小，所以基本上都待在笼子里；只是偶尔放出来逗逗它，玩儿一会儿。但即使这样，它也在房间里拉了个遍–这让我觉得有些恶心。<br>适应了新环境后，我爱人就开始训练它在固定的地方上厕所；但是这件事的困难程度远远超过了我们的预期。来到我们家三个月后，它依然没学会。虽然一直在笼子里，但是拉在笼子里也很恶心。我爱人一贯很有耐心，但是训练上厕所耗尽了她的耐心；只要白虎拉在了笼子里，就免不了一顿揍。</p>
<h2 id="转折"><a href="#转折" class="headerlink" title="转折"></a>转折</h2><p>我觉得白虎太可怜了，出生两个月就离开妈妈，被卖到一个陌生的地方，还要因为吃喝拉撒挨揍；所以，我非常反对我爱人揍他，为此我还和她吵过架。<br>终于，三个月后，在白虎又一次因为乱撒尿挨揍后，我和爱人大吵一架；然后我决定我来训它定点上厕所。我在网上找了一些别人训练的方法，然后挑了一个觉得合理的开始尝试。尝试了几天，我爱人也觉得合理，然后继续交给她来训练。终于坚持了一个多星期后，有了很大改进。<br>最终，我忘了具体用了多长时间，白虎学会了定点上厕所。学会之后，我们也把它的笼子撤了。那个时候刚刚入秋，天气也慢慢地变得凉爽，白虎的免疫也做完了，我们也慢慢的开始在小区内遛它。</p>
<h2 id="快乐"><a href="#快乐" class="headerlink" title="快乐"></a>快乐</h2><p>白虎带给我的快乐是我之前完全没有预料到的，随着它慢慢长大，和我们在一起的时间变长，我们的感情也慢慢地增进。我平时工作的时候，它很喜欢在我的桌子底下睡觉；家里没人的时候就趴在门口睡觉；我们回来的时候，一开门就开始朝我们摇尾巴。这种陪伴的幸福感是我之前完全没有过的，每天早上它会闹着让赶紧出门遛它；如果我们出门的时候没有给它戴牵引绳，它就知道不会带它出门，所以大部分时候会安静的看着我们出门，如果带了就会变得异常兴奋，迫不及待的在门口等着出门。</p>
<p>生活并不总是开心，但是生活总是有开心的事情。</p>
]]></content>
      <tags>
        <tag>生活</tag>
        <tag>白虎</tag>
      </tags>
  </entry>
  <entry>
    <title>过年记事（二零二四年）</title>
    <url>/post/life-2024-02-23/</url>
    <content><![CDATA[<p>又一年过去了。</p>
<h2 id="2023年回顾"><a href="#2023年回顾" class="headerlink" title="2023年回顾"></a>2023年回顾</h2><p>2023年发生了几件值得记录的事情：</p>
<p>房子的问题终于得到解决，这几年来一直困扰着我们的房子问题终于在2023年得到了解决。</p>
<p>暑假期间，张思远和他妈妈去了青岛旅行，这是他第一次见到海，给他留下了深刻的印象。</p>
<p>我们买了一只比熊犬，取名为白虎。起初花了2000块钱，觉得有点贵，但它非常可爱，现在看来觉得非常划算。刚开始训练它上厕所的时候花了很大的力气，甚至和媳妇吵了几次。不过最终结果是好的，它学会了，并且变得越来越可爱。过年时带回家，受到了家人的欢迎。</p>
<p>最后，和张思远相关的事情，他在2023年取得了很大的进步，无论是阅读量还是理解能力都有了明显的提高。最重要的是，他对阅读的兴趣不减反增，让我们感到非常欣慰。</p>
<h2 id="过年"><a href="#过年" class="headerlink" title="过年"></a>过年</h2><p>今年过年很开心，相当平静。带着白虎回家增添了不少乐趣。今年去了两次小河边。</p>
<p><img src="/images/life20240223river.png" alt="小河"></p>
]]></content>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>自由</title>
    <url>/post/life-geli/</url>
    <content><![CDATA[<p>二零二二年七月二十号，终于回归自由了。<br>听了邓紫棋的《泡沫》，从没有像今天这样觉得好听。</p>
]]></content>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>口号</title>
    <url>/post/boring-slogans/</url>
    <content><![CDATA[<p>特别厌烦一群人喊一些莫名其妙的口号，更然人厌烦的是这个口号成为了他们的专属，好像这些文字是他们发明的，邪教一样。比如:</p>
<p><strong>You’ll Never Walk Alone</strong></p>
<p>着实恶心。</p>
]]></content>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>过年记事（二零二二年）</title>
    <url>/post/life-2022-06-13/</url>
    <content><![CDATA[<p>二零二一年一整年都没回家。</p>
<a id="more"></a>
<p>回家后发现奶奶有时候不知道我是谁，爷爷倒是和没有太大变化，但是因为一直照顾奶奶非常累，看上去并不是很高兴。<br>初一的时候又和媳妇儿、儿子去了附近村子的一条小河边，我非常喜欢去这条河边。去年回家时也去过一次，小河没什么变化，水还是很清。回家的时候同样顺便看了一下我们家的地 — 每年下一次地。<br>晓兵今年没回来，所以过年在家的几天一个朋友也没见。<br>在家只待了四天，觉得在家没什么可以做。</p>
<p><img src="/images/life20220613river.jpg" alt="小河"><br><img src="/images/life20220613field.jpg" alt="小麦"></p>
]]></content>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>随想 - 2021年12月03日</title>
    <url>/post/thinking-2021-12-03/</url>
    <content><![CDATA[<p>如果你一直强调自己喜欢打羽毛球，其实你没那么喜欢打羽毛球。</p>
<p>如果你一直强调自己喜欢读书，其实你没那么喜欢读书。</p>
<p>如果你一直强调自己喜欢写代码，其实你没那么喜欢写代码。</p>
<p>如果你一直强调自己热爱生活，其实你没那么热爱生活。</p>
<p>如果你一直在强调，其实你什么也没强调。</p>
]]></content>
      <tags>
        <tag>随想</tag>
      </tags>
  </entry>
  <entry>
    <title>供暖</title>
    <url>/post/gongnuan/</url>
    <content><![CDATA[<p>一入冬网上就会有很多人讨论“为什么南方没有供暖，南方的冬天也很冷，湿冷湿冷的”，甚至还有的说“我是南方人，在北方上学，觉得北方的冬天还没有南方冷”，等等，诸如此类。像讨论其它话题一样，在网上谁也说服不了谁。我们国家很大，这里说的南方一般是指上海、武汉这些纬度的地方。</p>
<a id="more"></a>
<p>但是我对“北方的冬天还没有南方冷”这种说法很不以为然，这句话有一个前提，就是北方的城市在供暖的情况下确实不冷。但是不知道网上有多少南方的同学在北方的农村过过冬。<br>北方冬天的农村真的很冷，小时候生活条件差，取暖的设备也很少，对于我来说冬天有许多不好的回忆。我在上大学以前，每年都冻手，但是形式不太一样。有时候肿的很大，中午如果有阳光的话，一暖和又非常痒，但是挠的话又非常疼，很痛苦。另外一种是皮肤会裂开，我的皮肤不好，冬天干燥，非常容易开裂，尤其是打球的时候，一用力就裂开了。当然，最痛苦的是很多时候肿和裂开会同时出现，痛不欲生。<br>我们老家在冬天的最低温度大概在零下10度左右，其实不算特别低，但是小时候的我觉得非常冷。小学的时候学校的条件非常差，冬天的时候教室里会用一个煤球炉来取暖，但是晚上这个煤球炉因为没有人的照料必然会灭了，第二天早上需要再生火，然后晚上再灭了。。。如此往复。而且，即使煤球炉不灭，那么大的教室，一个小煤球炉提供的热量微不足道。雪上加霜的是有时候教室的玻璃还会被打烂，在换上新的之前教室四面漏风。你可以尝试想想一下：在零下10度左右四面漏风的教室里，小手冻的红肿，趴在课桌上写字。。。整个冬天大概从农历的十月份到第二年的正月，三个月的时间。<br>总之，冬天对我来说真的很冷。我在上海生活过两年，相对于小时候的经历，上海的冬天真的差远了。。。</p>
<p>我上小学大概是1996年，可能现在的条件会好很多。</p>
]]></content>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>跳跳妙语(一)</title>
    <url>/post/life-tt-funny/</url>
    <content><![CDATA[<p>最近半年和张跳跳小朋友在一起生活，小朋友真是天真无邪，经常会说出一些让人哭笑不得的话。</p>
<a id="more"></a>

<h2 id="便便"><a href="#便便" class="headerlink" title="便便"></a>便便</h2><p>有一天他正在便便，然后问我：“爸爸，便便是黏的吗？”<br>我说：“是的，你没见过吗？”<br>他说：“见过啊，但是我没摸过啊。”<br>我：“。。。我也没摸过！”</p>
<h2 id="红彤彤"><a href="#红彤彤" class="headerlink" title="红彤彤"></a>红彤彤</h2><p>去县城买了二斤草莓，张跳跳吃的时候说：“妈妈，这个红彤彤的草莓比刚才那个更红彤彤。”</p>
]]></content>
      <tags>
        <tag>生活</tag>
        <tag>跳跳</tag>
      </tags>
  </entry>
  <entry>
    <title>春天</title>
    <url>/post/life-2020-spring/</url>
    <content><![CDATA[<p>最近一段时间工作状态和生活状态都很一般，一方面工作压力大，导致生活压力也大，自己也一直生病。虽然不是什么大病，但是总是不舒服。</p>
<a id="more"></a>

<p>因为新冠，大年初二（1月26号）我和媳妇儿就回到了北京，这是我第一次离家这么早。27号早上还没睡醒，好朋友给我打电话让我看一眼体育新闻，我问他怎么了，他让我自己看。然后看到了科比去世的消息，也看到了另外几个朋友给我发的微信消息。我已经忘了当时我的心情，可能是吃惊更多一些吧，然后我就想我有没有什么遗憾的。然后就想到14年秋天（13年？记不清楚了），湖人在上海打季前赛，我买了一张最便宜的票（500块），但是最后纠结生活比较窘迫，在最后时刻把票原价转给别人了。可能还有一个原因，那年科比因为13年的跟腱伤还没好，肯定不会上场，可能觉得也没什么好看的吧。比赛那天晚上，我和媳妇儿去了梅赛德斯中心，在场外溜达了一圈，花了50块钱买了一件盗版的24号球衣，一直穿到现在（也没长个）。好在第二年夏天，在科比的中国行上见到了他，拍了好多糊了的照片，还有一张相隔几十米的”合影”。这样说的话，应该是13年的中国赛，因为15年的夏天我就来北京了。<br>这样看来，我也没有什么太大的遗憾，只是觉得可惜。</p>
<p>一位发小的母亲患了癌症，好在医生说治愈率比较高，祝福。</p>
<p>希望时间赶快过去，然后未来会很好。</p>
]]></content>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>isNaN 函数</title>
    <url>/post/js-isnan/</url>
    <content><![CDATA[<p>在 JavaScript 中 NaN 不能通过 <code>==</code>, <code>!=</code>, <code>===</code>, <code>!==</code> 等操作符来比较是否相等. JavaScript 提供了一个全局的函数 <code>isNaN()</code>, 用来确定一个值是不是 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/NaN">NaN</a>; 同时, ES2015 中添加了一个函数 <code>Number.isNaN()</code>, 功能和全局的 <code>isNaN()</code> 类似, 这两个函数有一些区别.</p>
<a id="more"></a>

<h2 id="isNaN"><a href="#isNaN" class="headerlink" title="isNaN()"></a>isNaN()</h2><p>isNaN() 会首先将参数强制转换为 Number, 如果不能转换为 Number, isNaN() 函数会返回 true. 也就是说，如果这个值不能被转换(如果需要)为一个有效的 Number, 那么这个值就是一个 NaN, isNaN 就会返回true.</p>
<p>所以, 对于字符串来说, isNaN() 函数显得比较奇怪. 比如说, 字符串 ‘123’ 是字符串，理论上来说不是字符串, 但是 isNaN() 却返回 false.</p>
<p>例子:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">isNaN(undefined): true</span><br><span class="line">isNaN(null): false</span><br><span class="line">isNaN(&#39;&#39;): false</span><br><span class="line">isNaN(&#39;12&#39;): false</span><br><span class="line">isNaN(true): false</span><br><span class="line">isNaN(false): false</span><br><span class="line">isNaN(&#123;&#125;): true</span><br></pre></td></tr></table></figure>

<h2 id="Number-isNaN"><a href="#Number-isNaN" class="headerlink" title="Number.isNaN()"></a>Number.isNaN()</h2><p>这个函数是在 ES2015 里添加的，用来判断一个 Number 类型的值是不是 NaN. 它和全局的 isNaN() 函数的重要区别是, Number.isNaN() 不对传入的参数做强制类型转换.</p>
<p>所以对于非 Number 类型的值， 都会返回 false:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Number.isNaN(undefined): false</span><br><span class="line">Number.isNaN(null): false</span><br><span class="line">Number.isNaN(&#39;&#39;): false</span><br><span class="line">Number.isNaN(&#39;12&#39;): false</span><br><span class="line">Number.isNaN(true): false</span><br><span class="line">Number.isNaN(false): false</span><br><span class="line">Number.isNaN(&#123;&#125;): false</span><br></pre></td></tr></table></figure>

<p>返回 true:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Number.isNaN(NaN)</span><br><span class="line">Number.isNaN(Number.NaN)</span><br><span class="line">Number.isNaN(0&#x2F;0)</span><br></pre></td></tr></table></figure>

<p>注意:</p>
<p><code>Number.isNaN(0/0)</code> 返回 true, 其它除以 0 情况都返回 false.</p>
<p>参考:</p>
<ul>
<li>MDN Number.isNaN(): <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN</a></li>
<li>MDN isNaN(): <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/isNaN">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/isNaN</a></li>
</ul>
]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>英雄</title>
    <url>/post/life-hero/</url>
    <content><![CDATA[<p>《黑色梦中》<br>– 窦唯</p>
<p>我的寂寞和我的淚 我的表現是無所謂<br>若要堅強需要受罪 若要後悔需要懺悔<br>最好閉上你的嘴<br>喔 對 這樣才算可愛 儘管別人會感到奇怪<br>這不公道 我不能接受<br>到處尋找 尋找安慰 對我來說那太珍貴<br>人海茫茫不會後退 黑色夢中我去安睡<br>夢中沒有錯與對 夢中有安也有危<br>夢的時代我在胡說 夢醒時刻才會解脫<br>我不知道 我不能去說<br>我不能 不能 不能. . .</p>
<p>RIP.吹哨人</p>
]]></content>
  </entry>
  <entry>
    <title>Rust 笔记 - 枚举与模式匹配</title>
    <url>/post/note-rust-enum-and-match/</url>
    <content><![CDATA[<p><em><a href="https://rustlang-cn.org/office/rust/book/">《Rust编程语言》</a>笔记之二</em></p>
<h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><h3 id="创建枚举的两种方式"><a href="#创建枚举的两种方式" class="headerlink" title="创建枚举的两种方式"></a>创建枚举的两种方式</h3><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">IpAddrKind</span></span> &#123;</span><br><span class="line">    V4,</span><br><span class="line">    V6,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">IpAddrKind</span></span> &#123;</span><br><span class="line">    V4(<span class="built_in">String</span>),</span><br><span class="line">    V6(<span class="built_in">String</span>),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用第二种人方式可以直接给枚举赋值，而且枚举的数据类型可以不相同:</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">IpAddrKind2</span></span> &#123;</span><br><span class="line">    V4(<span class="built_in">u8</span>, <span class="built_in">u8</span>, <span class="built_in">u8</span>, <span class="built_in">u8</span>),</span><br><span class="line">    V6(<span class="built_in">String</span>),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>枚举中可以是任意的数据类型：struct, enum 等等。</p>
<h3 id="定义方法"><a href="#定义方法" class="headerlink" title="定义方法"></a>定义方法</h3><p>使用<code>impl</code>关键字可以给枚举定义方法:</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">IpAddrKind</span></span> &#123;</span><br><span class="line">    V4(<span class="built_in">u8</span>, <span class="built_in">u8</span>, <span class="built_in">u8</span>, <span class="built_in">u8</span>),</span><br><span class="line">    V6(<span class="built_in">String</span>),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> IpAddrKind &#123;</span><br><span class="line">  <span class="function"><span class="keyword">fn</span> <span class="title">call</span></span>(&amp;<span class="keyword">self</span>) &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;this is the method of a enum&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Option枚举"><a href="#Option枚举" class="headerlink" title="Option枚举"></a>Option枚举</h2><p>在<code>rust</code>中没有空值，但是存在一个表达空值的枚举, <code>Option</code>:</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Option</span></span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="literal">Some</span>&lt;T&gt;,</span><br><span class="line">  <span class="literal">None</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以只用<code>Option</code>定义一个可能为空的值:</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> age = <span class="literal">Some</span>(<span class="number">8</span>);</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;:?&#125;&quot;</span>, age); <span class="comment">// Some(8)</span></span><br></pre></td></tr></table></figure>

<p><code>Option</code>的存在保证了非<code>Option</code>为空值，少去很多预防性的代码，同时也减少了许多因为忘了预防性代码而导致的<code>bug</code>。</p>
<h2 id="match控制流运算符"><a href="#match控制流运算符" class="headerlink" title="match控制流运算符"></a>match控制流运算符</h2><p><code>match</code>允许我们将一个值与一系列的模式相比较并根据相匹配的模式执行相应代码。<br>模式可以由字面值、变量、通配符和许多其他内容构成。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">match</span> coin &#123;</span><br><span class="line">    Coin::Penny =&gt; &#123;</span><br><span class="line">      <span class="built_in">println!</span>(<span class="string">&quot;Luck penny&quot;</span>);</span><br><span class="line">      <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    Coin::Nickel =&gt; <span class="number">5</span>,</span><br><span class="line">    Coin::Dim =&gt; <span class="number">10</span>,</span><br><span class="line">    Coin::Quarter(state) =&gt; &#123; <span class="comment">// 绑定值的模式匹配</span></span><br><span class="line">      <span class="built_in">println!</span>(<span class="string">&quot;State quarter from &#123;:?&#125;!&quot;</span>, state);</span><br><span class="line">      <span class="number">25</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>每个分支关联的代码是一个表达式，表达式的返回值是整个<code>match</code>表达式的值。</p>
<h3 id="配置Option"><a href="#配置Option" class="headerlink" title="配置Option"></a>配置Option<T></h3><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">match</span> x &#123;</span><br><span class="line">  <span class="literal">Some</span>(i) =&gt; <span class="literal">Some</span>(i + <span class="number">1</span>),</span><br><span class="line">  <span class="literal">None</span> =&gt; <span class="literal">None</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以使用<code>_</code>通配符来匹配其余的情况。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> value = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">match</span> value &#123;</span><br><span class="line">    <span class="number">1</span> =&gt; <span class="built_in">println!</span>(<span class="string">&quot;1&quot;</span>),</span><br><span class="line">    <span class="number">2</span> =&gt; <span class="built_in">println!</span>(<span class="string">&quot;2&quot;</span>),</span><br><span class="line">    <span class="number">3</span> =&gt; <span class="built_in">println!</span>(<span class="string">&quot;3&quot;</span>),</span><br><span class="line">    _ =&gt; (),</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><em>偶然发现<code>match</code>中的各个分支不能返回不同的数据类型</em></p>
<h2 id="if-let控制流"><a href="#if-let控制流" class="headerlink" title="if let控制流"></a>if let控制流</h2><p>如果只需要匹配一个模式的话，<code>match</code>显得有些冗余, <code>rust</code>提供了<code>if let</code>表达式:</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="meta">#[derive(Debug)]</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">UsState</span></span> &#123;</span><br><span class="line">  Alabama,</span><br><span class="line">  Alaska,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Coin</span></span> &#123;</span><br><span class="line">  Penny,</span><br><span class="line">  Nickel,</span><br><span class="line">  Dim,</span><br><span class="line">  Quarter(UsState),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> coin = Coin::Quarter(UsState::Alaska);</span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> Coin::Quarter(state) = coin &#123;</span><br><span class="line">  <span class="built_in">println!</span>(<span class="string">&quot;State quarter from &#123;:?&#125;&quot;</span>, state);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  count += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如上图, <code>if let</code>表达式后可以有<code>else</code>语句。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>没有空值的概念还是挺新奇的，只是没有实战经验还不太确定这样的特性是不是真的对编写安全的代码有帮助。<br><code>match</code>语句和其它语言的<code>switch</code>语句比较像。</p>
]]></content>
      <tags>
        <tag>笔记</tag>
        <tag>Rust</tag>
      </tags>
  </entry>
  <entry>
    <title>Rust 笔记 - 通用编程概念</title>
    <url>/post/note-rust-general/</url>
    <content><![CDATA[<p><em><a href="https://rustlang-cn.org/office/rust/book/">《Rust编程语言》</a>笔记之一</em></p>
<h2 id="关于cargo"><a href="#关于cargo" class="headerlink" title="关于cargo"></a>关于cargo</h2><ul>
<li><code>cargo run</code></li>
<li><code>cargo build</code></li>
<li><code>cargo check</code></li>
<li><code>cargo new &#123;project name&#125;</code></li>
<li><code>cargo doc --open</code>: 构建本地及其依赖的文档</li>
</ul>
<h2 id="通用编程概念"><a href="#通用编程概念" class="headerlink" title="通用编程概念"></a>通用编程概念</h2><p>如果需要使用关键字作为变量名称，在变量前加<code>r#</code>，比如<code>r#match</code></p>
<a id="more"></a>

<h3 id="变量与可变性"><a href="#变量与可变性" class="headerlink" title="变量与可变性"></a>变量与可变性</h3><p>变量默认是不变的，可以使用<code>mut</code>关键字声明可变的变量:</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> x = <span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<p>使用<code>const</code>声明常量，常量有几个特征：</p>
<ol>
<li>不能使用<code>mut</code>关键字</li>
<li>必须声明类型</li>
<li>习惯用大写字母加下划线命名</li>
</ol>
<p>可以使用<code>let</code>关键字对一个变量多次声明，这样后面声明的变量会将第一个声明的变量隐藏，这种行为叫做<code>隐藏(shadowing)</code>:</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> x = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">let</span> x = <span class="string">&quot;zhang&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><h4 id="标量类型"><a href="#标量类型" class="headerlink" title="标量类型"></a>标量类型</h4><h5 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h5><table>
<thead>
<tr>
<th>长度</th>
<th align="center">有符号</th>
<th align="right">无符号</th>
</tr>
</thead>
<tbody><tr>
<td>8-bit</td>
<td align="center">i8</td>
<td align="right">u8</td>
</tr>
<tr>
<td>16-bit</td>
<td align="center">i16</td>
<td align="right">u16</td>
</tr>
<tr>
<td>32-bit</td>
<td align="center">i32</td>
<td align="right">u32</td>
</tr>
<tr>
<td>64-bit</td>
<td align="center">i64</td>
<td align="right">u64</td>
</tr>
<tr>
<td>arch</td>
<td align="center">isize</td>
<td align="right">usize</td>
</tr>
</tbody></table>
<p><code>arch</code>依赖计算机的架构，如果是 64 位的架构上，是 64 位，如果是 32 架构，是 32 位。</p>
<h5 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h5><p>有两种类型: <code>f32</code>,<code>f64</code></p>
<h4 id="复合类型"><a href="#复合类型" class="headerlink" title="复合类型"></a>复合类型</h4><p><code>Rust</code>中有两种复合类型: <code>元组(tuple)</code>和<code>数组(array)</code></p>
<h5 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h5><blockquote>
<p>元组是一个将多个类型的值组合进一个复合类型的主要方式。</p>
</blockquote>
<ul>
<li>元组中的数据类型不必相同</li>
<li>元组可以使用<code>解构(destructing)</code>对元组赋值</li>
<li>使用点号(<code>.</code>)和下标识访问元组成员</li>
</ul>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">  <span class="keyword">let</span> tup: (<span class="built_in">i32</span>, <span class="built_in">f32</span>, <span class="built_in">i8</span>) = (<span class="number">32</span>, <span class="number">12.3</span>, <span class="number">8</span>);</span><br><span class="line">  <span class="keyword">let</span> (foo, bar, zoo) = tup;</span><br><span class="line">  <span class="built_in">println!</span>(<span class="string">&quot;foo: &#123;&#125;, bar: &#123;&#125;, zoo: &#123;&#125;&quot;</span>, foo, bar, zoo)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h5><ul>
<li>数组是定长的，声明后不能再改变数组的长度</li>
<li>数组中的元素的数据类型必须相同</li>
<li>如果越界访问数组，编译会报错</li>
</ul>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr: [<span class="built_in">i32</span>, <span class="number">5</span>] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br></pre></td></tr></table></figure>

<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>在<code>rust</code>中，使用<code>snake case</code>规范风格: 小写字母加下划线。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">say_something</span></span>() &#123;</span><br><span class="line">  <span class="comment">// expressions</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Rust 是一门基于表达式(expression-based)的语言。 // 注: 不理解</p>
</blockquote>
<p>在 Rust 中，语句不返回值，因此不能把<code>let</code>语句复制给另外一个变量，如:</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> x = (<span class="keyword">let</span> y = <span class="number">10</span>); <span class="comment">// 报错: error: expected expression, found statement (`let`)</span></span><br></pre></td></tr></table></figure>

<ul>
<li>函数调用是一个表达式，宏调用也是，<code>&#123;&#125;(代码块)</code>也是</li>
<li>如果表达式后加分号，则是一个语句，如果不加，就是一个表达式，<strong>表达式是有返回值的</strong></li>
<li>函数签名中必须声明每个变量的类型</li>
<li><code>()</code>用来声明不返回值的函数</li>
</ul>
<h3 id="控制流"><a href="#控制流" class="headerlink" title="控制流"></a>控制流</h3><h4 id="if"><a href="#if" class="headerlink" title="if"></a>if</h4><ul>
<li><code>if</code>中代码的条件必须是<code>bool</code>值</li>
<li><code>if</code>是一个表达式，所以可以在<code>let</code>语句的右侧使用<code>if</code>，但是，各个分支中的表达式的结果必须相同的数据类型</li>
</ul>
<h4 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h4><p><code>Rust</code>中有三种循环: <code>loop</code>, <code>while</code>, <code>for</code></p>
<ul>
<li><code>loop</code>可以重复执行一段代码，直到遇到<code>Ctrl + C</code>或者<code>break</code>才会结束循环</li>
</ul>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p><code>Rust</code>中的控制流和其它语言中的比较类似，唯一比较特殊的是表达式的概念，比如，<code>if</code>是一个表达式语句，可以直接赋值给<code>let</code>，这一点挺有意思的。</p>
<p><em><a href="https://github.com/polunzh/rust-demo">练习代码</a></em></p>
]]></content>
      <tags>
        <tag>笔记</tag>
        <tag>Rust</tag>
      </tags>
  </entry>
  <entry>
    <title>《Node.js事件循环》笔记</title>
    <url>/post/note-nodejs-event-loop/</url>
    <content><![CDATA[<p>在Node.js中，<em>事件循环</em>是实现<em>异步I/O</em>的关键，是必须要了解的知识。<br>这篇笔记是我读官方文档里关于<a href="https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/">事件循环的文章</a>得来的。</p>
<h2 id="事件循环的概念"><a href="#事件循环的概念" class="headerlink" title="事件循环的概念"></a>事件循环的概念</h2><blockquote>
<p>事件循环使单线程的JavaScript实现了异步I/O操作，通过将负载交给系统内核执行。由于大多数的现代操作系统都是多线程的，能在后台执行多任务的操作。当后台操作完成后，内核(kernel)通知Node.js，这样的话回调函数就可以添加到poll队列中，直到执行完成。</p>
</blockquote>
<a id="more"></a>

<h2 id="事件循环的执行顺序"><a href="#事件循环的执行顺序" class="headerlink" title="事件循环的执行顺序"></a>事件循环的执行顺序</h2><p><img src="https://i.loli.net/2019/05/16/5cdd0d363247e58525.png" alt="事件循环"></p>
<p><strong>图片中的每个阶段称为phase</strong> <em>(图片来自libuv文档)</em></p>
<p>每个阶段(phase)都有一个待执行的回调函数<em>FIFO</em>队列，每一个阶段都有所不同。事件循环每进行到一个阶段，就会执行当前阶段特有的操作，然后执行回调函数，<strong>直至将回调函数的队列清空或者达到设置的最大限制</strong>。</p>
<h3 id="timers"><a href="#timers" class="headerlink" title="timers"></a>timers</h3><p>该阶段执行的是由*setTimeout()<em>和</em>setInterval()*设置的回调函数。</p>
<p>从技术上来讲，<em>poll</em>阶段控制着<em>timers</em>阶段什么时候执行。比如下面的代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">&#x27;timeout&#x27;</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.timeEnd(<span class="string">&#x27;timeout&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">900</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readFile</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  fs.readFile(<span class="string">&#x27;./timeout.js&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(&#123;<span class="attr">a</span>: <span class="number">1</span>&#125;)));</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">readFile();</span><br></pre></td></tr></table></figure>

<p>第一个<em>setTimeout</em>设置的时间是<em>900ms</em>，但是用<em>console.timeEnd()<em>的输出用时却是大于</em>900ms</em>的，在我的电脑上大约是<em>902ms</em>左右。这是因为当事件循环进行到<em>poll</em>阶段时，发现队列中没有任务，然后等待了一会儿(小于 <em>900ms</em>)，然后读文件操作执行完了，并且将回调函数添加到了<em>poll</em>队列中，然后执行完该回到函数后(大概用了<em>2ms</em>)发现<em>setTimeout()<em>设置的时间到了，然后执行了其回调函数。所以</em>setTimeout()<em>的回调函数的执行等待了大于</em>900ms</em>的时间。</p>
<p>为了防止<em>poll</em>阶段<em>饿死</em>事件循环，<em>libuv</em>设置了<em>poll</em>阶段可以行的回调函数的最大数量限制，该限制在不同的的系统上不相同。</p>
<h3 id="pending-callbacks"><a href="#pending-callbacks" class="headerlink" title="pending callbacks"></a>pending callbacks</h3><p>执行延迟到下一个阶段的<em>I/O</em>回调。</p>
<p>该阶段执行一些系统操作的回调，比如<em>TCP</em>的链接错误。</p>
<h3 id="idle-prepare"><a href="#idle-prepare" class="headerlink" title="idle,prepare"></a>idle,prepare</h3><p>内部使用(不太明白内部使用是什么意思)。</p>
<h3 id="poll"><a href="#poll" class="headerlink" title="poll"></a>poll</h3><ul>
<li>获取新的I/O事件；</li>
<li>执行几乎所有I/O相关的回调函数，除了：<em>close callback</em>，由<em>timers</em>和*setImmediate()*设置的回调。</li>
</ul>
<p>Node.js可能会阻塞在该阶段。</p>
<p>当事件循环进行到该阶段，并且没有设置<em>timers</em>时，有可能会发生下面的两件事情之一：</p>
<ol>
<li>如果<em>poll</em>队列不为空，事件循环会处理队列里的回调函数，直到处理完成或者达到系统的最大限制；</li>
<li>如果<em>poll</em>队列为空，又会发生下面的两件事情之一：<ol>
<li>如果设置了<em>setImmediate()<em>，则事件循环会结束</em>poll</em>阶段，然后进入到<em>check</em>阶段，去执行<em>setImmediate</em>设置的回调函数；</li>
<li>如果没有设置*setImmediate()*，则事件循环会等待回调函数添加到队列，然后立即执行它们。</li>
</ol>
</li>
</ol>
<blockquote>
<p>一旦poll队列为空，事件循环会去检查是否有timers到时间，如果有，就返回timers阶段执行到期的timers</p>
</blockquote>
<h3 id="check"><a href="#check" class="headerlink" title="check"></a>check</h3><p>执行*setImmediate()*设置的回调。</p>
<p>该阶段主要是用来执行<em>poll</em>阶段后需要立即执行的操作的。如果<em>poll</em>阶段闲置了，并且<em>setImmediate()<em>设置了一些需要执行的脚本，循环就会直接进入</em>check</em>阶段。<em>setImmediate()<em>其实是一个特殊的</em>timer</em>.</p>
<h3 id="close-callback"><a href="#close-callback" class="headerlink" title="close callback"></a>close callback</h3><p>关闭事件的回调函数，比如<code>socket.on(&#39;close&#39;, ...)</code>。</p>
]]></content>
      <tags>
        <tag>Node.js</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js中的Timers</title>
    <url>/post/nodejs-timers/</url>
    <content><![CDATA[<p>Node.js中有三个和定时相关的API: <code>setTimeout(), setInterval(), setImmediate()</code>，他们都位于<a href="https://nodejs.org/dist/latest-v10.x/docs/api/timers.html">timers</a>模块中。而且<code>timers</code>模块是全局模块，不需要用<code>require</code>导入就可以使用。</p>
<h2 id="setTimeout"><a href="#setTimeout" class="headerlink" title="setTimeout"></a>setTimeout</h2><p><code>setTimeout()</code>的第一个参数时一段时间后执行的函数，第二个参数多少毫秒(<code>ms</code>)后；但是Node.js无法保证毫秒不差，只能保证不早于设置的时间。</p>
<p>返回<code>Timeout</code>对象，可以使用<code>clearTimeout()</code>取消定时任务，也可以使使用<code>unref()函数</code>改变其行为。</p>
<a id="more"></a>

<h2 id="setImmediate"><a href="#setImmediate" class="headerlink" title="setImmediate"></a>setImmediate</h2><p><code>setImmediate()</code>的执行时间是<code>当前时间循环周期(event loop cycle</code>)的最后，它表示其后的任何代码都会先于<code>setImmediate*()</code>中的回调函数的执行。</p>
<p>可以使用<code>clearImmediate()</code>函数取消定时任务。</p>
<h3 id="和process-nextTick-的区别"><a href="#和process-nextTick-的区别" class="headerlink" title="和process.nextTick()的区别"></a>和process.nextTick()的区别</h3><ol>
<li><code>process.nextTick()</code>的执行先于<code>setImmediate()</code>;</li>
<li><code>process.nextTick()</code>的执行不可以被取消。</li>
</ol>
<h2 id="setInterval"><a href="#setInterval" class="headerlink" title="setInterval"></a>setInterval</h2><p>和<code>setTimeout()</code>一样，<code>setInterval()</code>也返回<code>Timeout</code>对象，也同样可以被取消，只不过是通过<code>clearInterval()</code>函数。同样可以使用<code>Timeout</code>对象的<code>unref()</code>修改预设的定时行为。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><table>
<thead>
<tr>
<th></th>
<th>返回值</th>
<th>是否可以取消</th>
</tr>
</thead>
<tbody><tr>
<td>setTimeout</td>
<td>Timeout</td>
<td>是，clearTimeout/unref</td>
</tr>
<tr>
<td>setInterval</td>
<td>Timeout</td>
<td>是，clearInterval/unref</td>
</tr>
<tr>
<td>setImmediate</td>
<td>Immediate</td>
<td>是，clearImmediate</td>
</tr>
</tbody></table>
<h2 id="容易忽略的"><a href="#容易忽略的" class="headerlink" title="容易忽略的"></a>容易忽略的</h2><p>看文档才知道他们都有一个参数<code>args</code>，用来向回调函数传递参数:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">(<span class="params">...args</span>) =&gt;</span> <span class="built_in">console</span>.log(args), <span class="number">1000</span>, <span class="number">1</span>, <span class="number">21</span>, <span class="number">3</span>); <span class="comment">// output: [1, 21, 3]</span></span><br><span class="line">setImmediate(<span class="function">(<span class="params">...args</span>) =&gt;</span> <span class="built_in">console</span>.log(args), <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>); <span class="comment">// output: [2, 3, 4]</span></span><br><span class="line"><span class="built_in">setInterval</span>(<span class="function">(<span class="params">...args</span>) =&gt;</span> <span class="built_in">console</span>.log(args), <span class="number">3000</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>); <span class="comment">// output: [1, 2 ,1]</span></span><br></pre></td></tr></table></figure>



<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li>官方文档: <a href="https://nodejs.org/dist/latest-v10.x/docs/api/timers.html">https://nodejs.org/dist/latest-v10.x/docs/api/timers.html</a></li>
<li>Timers in Node.js and beyond: <a href="https://nodejs.org/en/docs/guides/timers-in-node/">https://nodejs.org/en/docs/guides/timers-in-node/</a></li>
<li>The Node.js Event Loop, Timers, and process.nextTick(): <a href="https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/">https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/</a></li>
</ol>
]]></content>
      <tags>
        <tag>Node.js</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>阅读JavaScript MDN Array</title>
    <url>/post/js-mdn-array-method/</url>
    <content><![CDATA[<p>周末下午没有特别紧急的事情，所以在<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array">MDN</a>上复习了一下JavaScript数组中方法的用法，还真有一些之前不了解的点。</p>
<a id="more"></a>

<h2 id="Array-from"><a href="#Array-from" class="headerlink" title="Array.from"></a>Array.from</h2><p><code>Array.from</code>的方法签名是这样的: <code>Array.from(arrayLike[,mapFn[,tihsArg]])</code>，所以还可以这样用:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Arrya.from([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="function"><span class="params">x</span> =&gt;</span> x &gt; <span class="number">2</span>); <span class="comment">// [3]</span></span><br></pre></td></tr></table></figure>

<h2 id="Array-isArray"><a href="#Array-isArray" class="headerlink" title="Array.isArray"></a>Array.isArray</h2><p>这个函数本身没有什么，但是MDN上举的一个例子还是第一次知道：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.isArray(<span class="built_in">Array</span>.prototype) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>也就是说，<code>Array.prototype</code>的值是个数组。</p>
<h2 id="Array-of和只有一个数字参数时的Array构造函数的不同"><a href="#Array-of和只有一个数字参数时的Array构造函数的不同" class="headerlink" title="Array.of和只有一个数字参数时的Array构造函数的不同"></a>Array.of和只有一个数字参数时的Array构造函数的不同</h2><p>当使用<code>Array</code>构造函数时，如果只给构造函数传递一个数字参数<code>N</code>，则结果是返回一个长度为N的数组，数组里不包含任何元素。</p>
<p>而相同条件下，<code>Array.of</code>是返回的是包含该数字的一个数字对象。</p>
<h2 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h2><p>这个方法可以传递多个参数，第一次知道:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> animals = [<span class="string">&#x27;dog&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> people = [<span class="string">&#x27;frank&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> coll = [<span class="string">&#x27;foo&#x27;</span>];</span><br><span class="line"></span><br><span class="line">coll.concat(animals, people); <span class="comment">// 返回: [&quot;foo&quot;, &quot;dog&quot;, &quot;frank&quot;]</span></span><br></pre></td></tr></table></figure>

<p>参数也可以是简单值类型:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[].concat(<span class="number">1</span>, [<span class="string">&#x27;dog&#x27;</span>]); <span class="comment">// 返回: [1, &quot;dog&quot;]</span></span><br></pre></td></tr></table></figure>



<h2 id="copyWithin"><a href="#copyWithin" class="headerlink" title="copyWithin"></a>copyWithin</h2><p>方法签名: <code>arr.copyWithin(target[, start[, end]])</code></p>
<p>如果<code>start/end</code>参数省略，则默认为0；</p>
<p>如果<code>target/start/end</code>为负数，则取值为: <code>length + target/start/end</code></p>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr1.copyWithin(<span class="number">0</span>, <span class="number">3</span>, <span class="number">5</span>)); <span class="comment">// 输出: [ 4, 5, 3, 4, 5, 6 ]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr2.copyWithin(<span class="number">0</span>, <span class="number">3</span>)); <span class="comment">// 输出: [ 4, 5, 6, 4, 5, 6 ]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].copyWithin(<span class="number">1</span>)); <span class="comment">// 输出: [ 1, 2 ]</span></span><br><span class="line"><span class="built_in">console</span>.log([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].copyWithin(<span class="number">1</span>, <span class="number">2</span>)); <span class="comment">// 输出: [ 1, 3, 3 ]</span></span><br><span class="line"><span class="built_in">console</span>.log([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].copyWithin(<span class="number">0</span>, <span class="number">-2</span>)); <span class="comment">// 输出: [ 2, 3, 3 ]</span></span><br></pre></td></tr></table></figure>



<h2 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h2><p>跳出<code>forEach</code>循环的方法: <code>return</code>或者抛出一个异常。</p>
<h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><p>看到一个有点儿意思的关于<code>map</code>方法的一个<code>坑</code>:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="built_in">parseInt</span>); <span class="comment">// 输出 1, NaN, NaN</span></span><br></pre></td></tr></table></figure>

<p>之所以是这样的输出，是因为<code>map</code>有三个参数，第一个参数时当前遍历的元素，第二个是当前元素在数组中的索引，第三个是当前遍历的数组对象。而<code>parseInt</code>函数有两个参数，第一个是被转换的值，第二个是基数(radix)，<strong>基数为零，则为10</strong>。于是上面的例子等价于:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="number">1</span>, <span class="number">10</span>);</span><br><span class="line"><span class="built_in">parseInt</span>(<span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">parseInt</span>(<span class="number">3</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<h2 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h2><p>该方法覆盖了<code>Object.prototype.toString</code>方法，返回由逗号分隔的字符串。</p>
<h2 id="常用的函数对原数组的修改情况"><a href="#常用的函数对原数组的修改情况" class="headerlink" title="常用的函数对原数组的修改情况"></a>常用的函数对原数组的修改情况</h2><table>
<thead>
<tr>
<th align="left">#方法</th>
<th align="center">#是否修改原有数组</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td align="left">Array.prototype.concat</td>
<td align="center">否</td>
<td></td>
</tr>
<tr>
<td align="left">Array.prototype.push</td>
<td align="center">是</td>
<td></td>
</tr>
<tr>
<td align="left">Array.prototype.pop</td>
<td align="center">是</td>
<td></td>
</tr>
<tr>
<td align="left">Array.prototype.map</td>
<td align="center">否</td>
<td></td>
</tr>
<tr>
<td align="left">Array.prototype.reverse</td>
<td align="center">是</td>
<td></td>
</tr>
<tr>
<td align="left">Array.prototype.shift</td>
<td align="center">是</td>
<td>修改数组的长度</td>
</tr>
<tr>
<td align="left">Array.prototype.unshift</td>
<td align="center">是</td>
<td>修改数组的长度</td>
</tr>
<tr>
<td align="left">Array.prototype.slice</td>
<td align="center">否</td>
<td>浅拷贝</td>
</tr>
<tr>
<td align="left">Array.prototype.sort</td>
<td align="center">是</td>
<td></td>
</tr>
<tr>
<td align="left">Array.prototype.splice</td>
<td align="center">是</td>
<td></td>
</tr>
<tr>
<td align="left">Array.prototype.copyWithin</td>
<td align="center">是</td>
<td></td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>数组</tag>
        <tag>MDN</tag>
      </tags>
  </entry>
  <entry>
    <title>考驾照</title>
    <url>/post/life-driving-license/</url>
    <content><![CDATA[<p>2015年9月份在驾校报名，但是中间因为各种理由推脱，终于在2019年3月8号拿到了驾照。用了3年半的时间，不容易啊。</p>
<a id="more"></a>

<h2 id="科目一"><a href="#科目一" class="headerlink" title="科目一"></a>科目一</h2><p>15年报完名后，去上了一节理论课就没再去过驾校了。18年6月份的时候，小伙伴发现再不考的话要过期了，于是才下定决心考，祛除这个心病。考试的前一天是个周日，于是整个下午都在看题，看的痛不欲生。还好第二天考试过了，比较顺利。</p>
<h2 id="科目二"><a href="#科目二" class="headerlink" title="科目二"></a>科目二</h2><p>科目二要学一些开车的基本技术，像什么定点停车、倒车入库。但是要学7节课，离驾校又远，每次去都要起很早，5点45左右起床，这对我来说太痛苦了。不过这都不算什么，最麻烦的事情是约课，不知道什么原因，自己在驾校提供的约车软件上约车根本约不到，只能在淘宝上买，25块钱，而且肯定能买到。</p>
<p>科目二还是挺简单的，中间碰见一个不错的教练，过的没有任何难度。</p>
<h2 id="科目三"><a href="#科目三" class="headerlink" title="科目三"></a>科目三</h2><p>考之前觉得科目三挺难的，因为就学了两节课，还是在路上考，非常紧张。考之前的一天上集训课，每次都挂了，心里很没底。</p>
<p>考试的时候还是很紧张，上路前的模拟灯光考试考了一道没有见过的灯光，但是凭着直觉作对了。万幸。</p>
<p>一上路开始考试，就遇到了前车停下了，我也跟着停下了。但是没想到考官说，为什么不走旁边的路？？？？？我说，教练没说旁边的路能走啊！！！不过考官还是给了我一次机会，万幸。</p>
<p>后面都很顺利。</p>
<h2 id="科目四"><a href="#科目四" class="headerlink" title="科目四"></a>科目四</h2><p>科目四没什么难度，考前看了看题，然后顺利的拿到了驾照。</p>
<p>虽然持续的时间很长，不过都是自己懒得去驾校，所以考试的过程我觉得还是挺顺利的。但是我觉得科目二这样考试不太合理，教练教的时候都是按照固定的点教的，甚至在哪个点打几圈方向盘都是确定的。我觉得实际开车的时候用处不大，应付考试罢了。</p>
]]></content>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js中module.exports和exports</title>
    <url>/post/node-module-exports/</url>
    <content><![CDATA[<p>在<code>Node.js</code>中，导出一个对象可以用<code>exports</code>，也可以用<code>module.exports</code>，但是这两者是有些区别的。<br>先看一个例子:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//snippet-1:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// foo1.js</span></span><br><span class="line"><span class="built_in">exports</span>.foo = <span class="string">&quot;foo1&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// foo2.js</span></span><br><span class="line"><span class="built_in">module</span>.exports.foo = <span class="string">&quot;foo2&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bar.js</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">require</span>(<span class="string">&#x27;./foo1&#x27;</span>).foo); <span class="comment">// Output: foo1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">require</span>(<span class="string">&#x27;./foo2&#x27;</span>).foo); <span class="comment">// Output: foo2</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>可以看到，这种情况下，<code>module.exports</code>和<code>exports</code>的效果是一样的。再看另外一个例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//snippet-2:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// foo1.js</span></span><br><span class="line"><span class="built_in">exports</span> = <span class="string">&quot;foo1&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// foo2.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="string">&quot;foo2&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bar.js</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">require</span>(<span class="string">&#x27;./foo1&#x27;</span>)); <span class="comment">// Output: &#123;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">require</span>(<span class="string">&#x27;./foo2&#x27;</span>)); <span class="comment">// Output: foo2</span></span><br></pre></td></tr></table></figure>

<p>在这个代码段中，<code>foo1.js</code>并没有导出想要的对象，为什么呢？<br>在<code>Node.js</code>中，<code>exports</code>是<code>module.exports</code>的一个引用，<code>Node.js</code>的官方文档中，给出了一个<code>require()</code>的简单的实现:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">require</span>(<span class="params"><span class="regexp">/* ... */</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="built_in">module</span> = &#123; <span class="attr">exports</span>: &#123;&#125; &#125;;</span><br><span class="line">  (<span class="function">(<span class="params"><span class="built_in">module</span>, <span class="built_in">exports</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// Module code here. In this example, define a function.</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">someFunc</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">    <span class="built_in">exports</span> = someFunc;</span><br><span class="line">    <span class="comment">// At this point, exports is no longer a shortcut to module.exports, and</span></span><br><span class="line">    <span class="comment">// this module will still export an empty default object.</span></span><br><span class="line">    <span class="built_in">module</span>.exports = someFunc;</span><br><span class="line">    <span class="comment">// At this point, the module will now export someFunc, instead of the</span></span><br><span class="line">    <span class="comment">// default object.</span></span><br><span class="line">  &#125;)(<span class="built_in">module</span>, <span class="built_in">module</span>.exports);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">module</span>.exports;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这就不难理解了，如果这样导出对象:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exports</span> = <span class="string">&#x27;xxx&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>其实是修改了<code>exports</code>的指向：不再是之前的<code>module.export</code>的指向；而在<code>Node.js</code>中是通过<code>module.exports</code>导出对象的，<br>所以在<code>snippets-2</code>中，并不能正确的导出结果。</p>
]]></content>
      <tags>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript中的Try...catch...finally</title>
    <url>/post/js-trycatch/</url>
    <content><![CDATA[<p>在<code>JS</code>中，<code>try</code>后面只要跟着一个<code>catch</code>或<code>finally</code>，有下面3中形式的用法：</p>
<ol>
<li>try…catch</li>
<li>try…finally</li>
<li>try…catch…finally</li>
</ol>
<a id="more"></a>
<p>这里需要注意的是<code>finally</code>：<br><em>无论在任何情况下，<code>finally</code>中的代码都会执行，哪怕是<code>try...catch</code>中抛出了异常!</em><br>比如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;aa&#x27;</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">6</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;aa&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">4</span>);</span><br></pre></td></tr></table></figure>

<p>该代码段中的<code>console</code>的输出结果是:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure>

<p><code>try</code>内部的<code>console.log(6)</code>和外部的<code>console.log(4)</code>都不会执行，但是<code>finally</code>中的会执行。<br>有了这样的特性，我们可以在<code>finally</code>中做一些<code>无论什么情况下</code>都需要做的事情，比如关闭<code>I/O</code>连接等等。</p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>《你就是孩子最好的玩具》读后感</title>
    <url>/post/book-toyofchild/</url>
    <content><![CDATA[<blockquote>
<p>豆瓣: <a href="https://book.douban.com/subject/6759256/">《你就是孩子最好的玩具》</a></p>
</blockquote>
<p>这是上上周读完的一本书，讲的的怎样教育孩子，通过“情感引导”什么的。。。读完很有收获，建议有孩子的可以读一下。<br>可是，我家跳跳并不在我身边。<br>我现在不敢确定跳跳长大后会以什么样的情感面对我这个和他呆的时间少的可怜的爸爸。我说这些话是有些伤心的，有孩子的大概会懂我是有多想和儿子在一起，和他玩游戏，给他讲故事。好吧，这对我来说很奢侈。</p>
<a id="more"></a>

<p>昨天是父亲节。<br>挣钱后没给我爸买过什么东西，反倒是前两年买房的时候把爸妈攒的积蓄花的精光。前天想着给他买了个剃须刀，我妈说他很高兴。</p>
<p>小时候他经常逗我和我妹妹，长大后就很少和我说话了。高一还是什么时候，有一次用公用电话给家里打电话，我爸接的，说我妈不在家，然后挂了。<br>08年高考的时候，考完理综后，我出去学校吃饭，在门口很吃惊的看到我爸在门口，那个时候也没有手机，他就在门口堵我，恰好堵到了。然后带我去县城的十字街吃了份米线，还买了一瓶营养快线：我高中3年几乎没有在外面吃过饭，那也是我第一次喝营养快线。</p>
<p>儿子马上3岁了，很高兴。</p>
]]></content>
      <tags>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>SSH 配置</title>
    <url>/post/ssh-config/</url>
    <content><![CDATA[<blockquote>
<p><code>SSH</code>是<code>Secure Shell</code>的简称，是一种加密的网络传输协议。</p>
</blockquote>
<h2 id="免密登录"><a href="#免密登录" class="headerlink" title="免密登录"></a>免密登录</h2><p>将生成好的本机的公钥填写到服务器的<code>/home/&#123;username&#125;/.ssh/authorized_keys</code>文件中，如果没有该文件，创建一个，然后重启<code>sshd</code>服务。<br>这时就可以在本机通过<code>ssh</code>登录服务器了：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh username@hostname</span><br></pre></td></tr></table></figure>

<h2 id="多个秘钥"><a href="#多个秘钥" class="headerlink" title="多个秘钥"></a>多个秘钥</h2><p>默认情况下，<code>ssh</code>会使用<code>~/.ssh/id_rsa</code>文件进行连接，但是很多情况下可能会在本机生成多个秘钥<code>key pair</code>。这个时候可以使用<code>~/.ssh/config</code>配置文件来指定各个主机的私钥文件：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">Host</span> &#123;<span class="string">name</span>&#125;</span><br><span class="line">  <span class="string">HostName</span> &#123;<span class="string">hostname</span>&#125;</span><br><span class="line">  <span class="string">User</span> &#123;<span class="string">user</span> <span class="string">name</span>&#125;</span><br><span class="line">  <span class="string">IdentityFile</span> <span class="string">~/.ssh/id_rsa1</span></span><br><span class="line"></span><br><span class="line"><span class="string">Host</span> &#123;<span class="string">name</span>&#125;</span><br><span class="line">  <span class="string">HostName</span> &#123;<span class="string">hostname</span>&#125;</span><br><span class="line">  <span class="string">User</span> &#123;<span class="string">user</span> <span class="string">name</span>&#125;</span><br><span class="line">  <span class="string">IdentityFile</span> <span class="string">~/.ssh/id_rsa2</span></span><br></pre></td></tr></table></figure>

<p>对于非登录的情况，比如克隆<code>git</code>仓库，<code>Host</code> 和 <code>HostName</code> 不能随意指定，具体得看<code>git</code>托管平台的情况。比如<code>github</code>的设置:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">Host</span> <span class="string">github.com</span></span><br><span class="line">  <span class="string">HostName</span> <span class="string">github.com</span></span><br><span class="line">  <span class="string">User</span> <span class="string">git</span></span><br><span class="line">  <span class="string">IdentityFile</span> <span class="string">~/.ssh/xxx</span></span><br></pre></td></tr></table></figure>

<h2 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h2><ol>
<li><code>man ssh_config 5</code></li>
<li><a href="https://wiki.archlinux.org/index.php/Secure_Shell_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87">Secure Shell (简体中文)</a></li>
</ol>
]]></content>
      <tags>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>GitLab CI 持续集成</title>
    <url>/post/gitlab-ci/</url>
    <content><![CDATA[<h2 id="GitLab-CI-能做什么"><a href="#GitLab-CI-能做什么" class="headerlink" title="GitLab CI 能做什么"></a>GitLab CI 能做什么</h2><p>比如,</p>
<ul>
<li>项目的单元测试覆盖率检查</li>
<li>项目中每次合并到 <code>master</code> 分支时都生成一个 <code>tag</code></li>
</ul>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><blockquote>
<p>必备条件: 有一个8.0+版本的 <code>Gitlab</code>, 或者使用 <code>gitlab.com</code>, <code>gitlab.com</code> 有免费的共享 <code>Runner</code></p>
</blockquote>
<ol>
<li>在项目中的根目录添加<code>.gitlab-ci.yml</code>文件</li>
<li>配置<code>GitLab Runner</code></li>
</ol>
<a id="more"></a>

<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>几个关键的概念</p>
<h3 id="gitlab-ci-yml"><a href="#gitlab-ci-yml" class="headerlink" title=".gitlab-ci.yml"></a>.gitlab-ci.yml</h3><p>几乎所有的工作都是在 <code>.gitlab-ci.yml</code> 文件中做的, <code>.gitlab-ci.yml</code>文件定义了<code>GitLab CI</code>要对项目的事情, 比如跑单元测试/自动构建/发布…</p>
<p>每次有代码 <code>push</code> 到仓库, <code>GitLab Runner</code> 都会去检查 <code>.gitlab-ci.yml</code> 文件, 然后开始执行 <code>.gitlab-ci.yml</code> 文件中的定义 <code>jobs</code>.</p>
<p>一个简单的<code>.gitlab-ci.yml</code></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">before_script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">echo</span> <span class="string">build</span> <span class="string">started</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># jobs</span></span><br><span class="line"><span class="attr">run_test:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">test:coverage</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">branches</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">pushes</span></span><br><span class="line">  <span class="attr">coverage:</span> <span class="string">&#x27;/Branches.*?(\d+(?:\.\d+)?)%/&#x27;</span> <span class="comment"># 测试覆盖率收集</span></span><br><span class="line"></span><br><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">test</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">release</span></span><br></pre></td></tr></table></figure>

<h3 id="jobs"><a href="#jobs" class="headerlink" title="jobs"></a>jobs</h3><p>具体的构建工作</p>
<p><code>.gitlab-ci.yml</code>中可以定义无数个<code>jobs</code>:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">run_test:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">variables:</span></span><br><span class="line">    <span class="attr">REQUIRED_COVERAGE:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;test stage&quot;</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">branches</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">pushes</span></span><br><span class="line">  <span class="attr">coverage:</span> <span class="string">&#x27;/Branches.*?(\d+(?:\.\d+)?)%/&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="jobs-中的关键词"><a href="#jobs-中的关键词" class="headerlink" title="jobs 中的关键词"></a>jobs 中的<code>关键词</code></h4><p>有很多关键词, 将近20个: <code>script</code> <code>stage</code> <code>type</code> <code>variables</code> 等等, 简单介绍几个:</p>
<ul>
<li><a href="https://docs.gitlab.com/ee/ci/yaml/README.html#script">script</a>: 是由 <code>Runner</code> 执行的 <code>shell</code> 脚本</li>
<li><a href="https://docs.gitlab.com/ee/ci/yaml/README.html#stage">stage</a>: 将<code>jobs</code>分成不同阶段, 相同阶段的<code>jobs</code>以并行的方式执行</li>
<li><a href="'https://docs.gitlab.com/ee/ci/yaml/README.html#only-and-except-simplified">only and except</a>: 限制<code>jobs</code>什么时候执行 如: <code>pushes</code> <code>branches</code> <code>tags</code>等等</li>
<li><a href="https://docs.gitlab.com/ee/ci/yaml/README.html#job-variables">Job variables</a>: 自定义的 <code>job</code> 变量</li>
</ul>
<h3 id="stages"><a href="#stages" class="headerlink" title="stages"></a><a href="https://docs.gitlab.com/ee/ci/yaml/README.html#stages">stages</a></h3><p>定义了 <code>jobs</code> 中执行的阶段, <em>阶段的名字可以自定义</em>, <code>stages</code> 中阶段定义的顺序就是 <code>jobs</code> 的执行顺序</p>
<p>如果没有定义 <code>stages</code> 结点， 则只能在 <code>jobs</code> 中使用 <code>build</code> <code>test</code> <code>deploy</code> 三个阶段, 而 <code>stages</code> 中的阶段名名称可以自定义:</p>
<p><img src="/images/gitlabci-stages.png" alt="stages"></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># test1 和 test2 会先于 build 执行</span></span><br><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">test1</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">test2</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">build</span></span><br></pre></td></tr></table></figure>

<h3 id="pipline"><a href="#pipline" class="headerlink" title="pipline"></a><a href="https://docs.gitlab.com/ee/ci/pipelines.html">pipline</a></h3><p><code>pipline</code> 可以简单的理解为一次构建, 一次构建中可以包含 <code>test</code> <code>build</code> <code>production</code> 等阶段.</p>
<p>它是一组按 <code>stages</code> 执行的 <code>jobs</code>, 同一个阶段(<code>stage</code>)的 <code>jobs</code> 都是按照并发执行的方式进行的, 一般情况下, 只有当前阶段的所有<code>jobs</code>都成功执行了,<code>pipline</code>才能进行下一个阶段的执行,如果有一个失败了,后续阶段的 <code>jobs</code> 都不会执行.</p>
<p>图示</p>
<p><img src="/images/gitlabci-pipline-stages.png" alt="pipline-stages"></p>
<p><img src="/images/gitlabci-pipline-jobs.png" alt="pipline-jobs"></p>
<h2 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h2><ul>
<li>安装配置 <code>Gitlab Runner</code></li>
<li><a href="https://docs.gitlab.com/ee/ci/">文档</a></li>
<li><a href="https://docs.gitlab.com/ee/ci/yaml/README.html">.gitlab-ci.yml Reference</a></li>
<li>用 <a href="https://gitlab.com/ci/lint">lint</a> 校验 <code>yml</code> 语法, 可以节省时间</li>
<li><a href="https://docs.gitlab.com/ee/ci/variables/README.html">GitLab CI/CD Variables</a></li>
</ul>
]]></content>
      <tags>
        <tag>CI</tag>
        <tag>GitLab</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js 代码段</title>
    <url>/post/node-snippets/</url>
    <content><![CDATA[<p>一些常用或有用的代码段，积少成多。</p>
<h2 id="http"><a href="#http" class="headerlink" title="http"></a>http</h2><ul>
<li>server<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    response.writeHead(<span class="number">200</span>, &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/plain;charset=utf-8&#x27;</span>&#125;);</span><br><span class="line"></span><br><span class="line">    response.end(<span class="string">&#x27;你好，跳跳&#x27;</span>);</span><br><span class="line">&#125;).listen(<span class="number">8080</span>);</span><br></pre></td></tr></table></figure>

</li>
</ul>
<a id="more"></a>

<ul>
<li>request<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> option = &#123;</span><br><span class="line">    hostname: <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">    port: <span class="number">8080</span>,</span><br><span class="line">    path: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    method: <span class="string">&#x27;GET&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> req = http.request(option, <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;STATUS: &#x27;</span> + res.statusCode);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;HEADERS: &#x27;</span> + <span class="built_in">JSON</span>.stringify(res.headers));</span><br><span class="line">    res.setEncoding(<span class="string">&#x27;utf8&#x27;</span>);</span><br><span class="line">    res.on(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">chunk</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(chunk);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">req.end();</span><br></pre></td></tr></table></figure>
<!-- more -->

</li>
</ul>
<h2 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a>Stream</h2><ul>
<li>ReadStream/WriteStream</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const fs &#x3D; require(&#39;fs&#39;);</span><br><span class="line"></span><br><span class="line">function copyFile(source, dist) &#123;</span><br><span class="line">   const readStream &#x3D; fs.createReadStream(source);</span><br><span class="line">   const writeStream &#x3D; fs.createWriteStream(dist);</span><br><span class="line"></span><br><span class="line">   readStream.on(&#39;data&#39;, (chunk) &#x3D;&gt; &#123;</span><br><span class="line">           writeStream.write(chunk);</span><br><span class="line">   &#125;);</span><br><span class="line"></span><br><span class="line">   &#x2F;&#x2F; 或者</span><br><span class="line">   fs.createReadStream(source).pipe(fs.createWriteStream(dist));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Node.js</tag>
        <tag>Snippets</tag>
      </tags>
  </entry>
  <entry>
    <title>Shell脚本笔记</title>
    <url>/post/note-shellscript/</url>
    <content><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><h3 id="Linux-手册页惯用的节名"><a href="#Linux-手册页惯用的节名" class="headerlink" title="Linux 手册页惯用的节名"></a>Linux 手册页惯用的节名</h3><table>
<thead>
<tr>
<th>节</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>Name</td>
<td>显示命令名和一段简短的描述</td>
</tr>
<tr>
<td>Synopsis</td>
<td>语法</td>
</tr>
<tr>
<td>Configuration</td>
<td>配置信息</td>
</tr>
<tr>
<td>Description</td>
<td>一般性描述</td>
</tr>
<tr>
<td>Options</td>
<td>选项描述</td>
</tr>
<tr>
<td>Exit Status</td>
<td>退出状态指示</td>
</tr>
<tr>
<td>Return Value</td>
<td>返回值</td>
</tr>
<tr>
<td>Errors</td>
<td>错误消息</td>
</tr>
<tr>
<td>Environment</td>
<td>使用的环境变量</td>
</tr>
<tr>
<td>Files</td>
<td>用到的文件</td>
</tr>
<tr>
<td>Version</td>
<td>版本信息</td>
</tr>
<tr>
<td>Conforming To</td>
<td>遵从的标准</td>
</tr>
<tr>
<td>Notes</td>
<td>其它有帮助的资料</td>
</tr>
<tr>
<td>Bugs</td>
<td>提交Bug的途径</td>
</tr>
<tr>
<td>Example</td>
<td>例子</td>
</tr>
<tr>
<td>Authors</td>
<td>略</td>
</tr>
<tr>
<td>CopyRight</td>
<td>略</td>
</tr>
<tr>
<td>SeeAlso</td>
<td>略</td>
</tr>
</tbody></table>
<a id="more"></a>

<h3 id="Linux手册页的内容区域"><a href="#Linux手册页的内容区域" class="headerlink" title="Linux手册页的内容区域"></a>Linux手册页的内容区域</h3><table>
<thead>
<tr>
<th>区域号</th>
<th>所涵盖的内容</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>可执行程序或 shell 命令</td>
</tr>
<tr>
<td>2</td>
<td>系统调用</td>
</tr>
<tr>
<td>3</td>
<td>库调用</td>
</tr>
<tr>
<td>4</td>
<td>特殊文件</td>
</tr>
<tr>
<td>5</td>
<td>文件格式与约定</td>
</tr>
<tr>
<td>6</td>
<td>游戏</td>
</tr>
<tr>
<td>7</td>
<td>概览、约定及杂项</td>
</tr>
<tr>
<td>8</td>
<td>超级用户和系统管理员命令</td>
</tr>
<tr>
<td>9</td>
<td>内核例程</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>笔记</tag>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Visual Studio Code 常用</title>
    <url>/post/vsc-tips/</url>
    <content><![CDATA[<h2 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h2><ul>
<li>导航到鼠标上次的位置：<ul>
<li>Windows<br><code>Alt+Left</code>: Back<br><code>Alt+Right</code>: Forward</li>
<li>Mac<br><code>Control+-</code>: Back</li>
<li>Linux<br><code>Ctrl+Alt+-</code>: Back<br><code>Ctrl+Shift+-</code>: Forward</li>
</ul>
</li>
</ul>
<a id="more"></a>

<h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><h3 id="删除搜索历史"><a href="#删除搜索历史" class="headerlink" title="删除搜索历史"></a>删除搜索历史</h3><blockquote>
<p>Clear Editor History</p>
</blockquote>
<h3 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h3><ul>
<li>快捷键: <a href="https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf">https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf</a></li>
</ul>
]]></content>
      <tags>
        <tag>vsc</tag>
        <tag>tips</tag>
      </tags>
  </entry>
  <entry>
    <title>Node 备忘</title>
    <url>/post/node-note/</url>
    <content><![CDATA[<h2 id="nvm"><a href="#nvm" class="headerlink" title="nvm"></a>nvm</h2><ul>
<li><code>root</code> 用户没有 <code>npm</code> 命令</li>
</ul>
<blockquote>
<p>From: <a href="https://stackoverflow.com/questions/21215059/cant-use-nvm-from-root-or-sudo">https://stackoverflow.com/questions/21215059/cant-use-nvm-from-root-or-sudo</a></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> run this</span></span><br><span class="line">n=$(which node); \</span><br><span class="line">n=$&#123;n%/bin/node&#125;; \</span><br><span class="line">chmod -R 755 $n/bin/*; \</span><br><span class="line">sudo cp -r $n/&#123;bin,lib,share&#125; /usr/local</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Node.js</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 代码段</title>
    <url>/post/py-snippets/</url>
    <content><![CDATA[<h2 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h2><ul>
<li>delay<blockquote>
<p>From: <a href="http://fredericiana.com/2014/11/14/settimeout-python-delay/">http://fredericiana.com/2014/11/14/settimeout-python-delay/</a></p>
</blockquote>
</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delay</span>(<span class="params">delay=<span class="number">0.</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Decorator delaying the execution of a function for a while.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrap</span>(<span class="params">f</span>):</span></span><br><span class="line"><span class="meta">        @wraps(f)</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">delayed</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">            timer = threading.Timer(delay, f, args=args, kwargs=kwargs)</span><br><span class="line">            timer.start()</span><br><span class="line">        <span class="keyword">return</span> delayed</span><br><span class="line">    <span class="keyword">return</span> wrap</span><br><span class="line"></span><br><span class="line"><span class="meta">@delay(3.0)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_func</span>(<span class="params">arg1, arg2</span>):</span></span><br><span class="line">    <span class="keyword">print</span> arg1, arg2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    my_func(<span class="string">&#x27;Hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Snippets</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 代码段</title>
    <url>/post/js-snippets/</url>
    <content><![CDATA[<h2 id="数字转换"><a href="#数字转换" class="headerlink" title="数字转换"></a>数字转换</h2><ul>
<li><p>十进制和16进制相互转换</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> hexNumber = (n).toString(<span class="number">16</span>); <span class="comment">// to hex</span></span><br><span class="line"><span class="keyword">let</span> decimal = <span class="built_in">parseInt</span>(hexNumber, <span class="number">16</span>); <span class="comment">// to decimal</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>16进制字符串转换为ACSII</p>
</li>
</ul>
<blockquote>
<p>From: <a href="https://stackoverflow.com/a/3745677">Stack Overflow</a></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hex2a</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> hex = data.toString();</span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; hex.length; i += <span class="number">2</span>) &#123;</span><br><span class="line">        str += <span class="built_in">String</span>.fromCharCode(<span class="built_in">parseInt</span>(hex.substr(i, <span class="number">2</span>), <span class="number">16</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h2><ul>
<li>sha1 加密<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> crypto = <span class="built_in">require</span>(<span class="string">&#x27;crypto&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> sha1 = crypto.createHash(<span class="string">&#x27;sha1&#x27;</span>);</span><br><span class="line">sha1.update(<span class="string">&#x27;str&#x27;</span>).digest(<span class="string">&#x27;hex&#x27;</span>);</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><ul>
<li><p>padLeft</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES6</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">padLeft</span>(<span class="params">str, len</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> val = <span class="string">&#x27;0&#x27;</span>.repeat(len - str.length) + str;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> val;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>reverse</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverse</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> str.split(<span class="string">&#x27;&#x27;</span>).reverse().join(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>Snippets</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux常用命令</title>
    <url>/post/linux-command/</url>
    <content><![CDATA[<h2 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h2><p><code>bz2</code></p>
<ul>
<li>tar cjf X.bz2 files 压缩</li>
<li>tar xjf X.bz2 解压</li>
</ul>
<h2 id="dd"><a href="#dd" class="headerlink" title="dd"></a>dd</h2><p>dd if=./{filename} of=/dev/{设备} bs={bytes a time} status=progress</p>
<h2 id="lsof"><a href="#lsof" class="headerlink" title="lsof"></a>lsof</h2><p><code># lsof -i :[port]</code> 查看端口占用信息</p>
<h2 id="Ubuntu升级单个的软件"><a href="#Ubuntu升级单个的软件" class="headerlink" title="Ubuntu升级单个的软件"></a>Ubuntu升级单个的软件</h2><p><code>apt-get install --only-upgrade &lt;packagename&gt;</code></p>
<h2 id="合并多个文件"><a href="#合并多个文件" class="headerlink" title="合并多个文件"></a>合并多个文件</h2><p><code>cat f1 f2 &gt; f</code></p>
]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>七月计划 二零一七</title>
    <url>/post/plan-2017-7/</url>
    <content><![CDATA[<p>需要读的书：</p>
<ul>
<li>《你不知道的JavaScript（上卷）》 <code>八号读完</code></li>
<li>《你不知道的JavaScript（中卷）》 <code>月底读完</code></li>
<li>读三章NodeJS文档</li>
</ul>
<p>代码</p>
<ul>
<li>这个月底上线新版的网站，不再使用<code>Hexo</code></li>
<li>完成 <code>LeetCode</code> 10道题</li>
</ul>
<a id="more"></a>

<hr>
<p>过去的大半年诸多不顺，心情糟透了。<br>上半年有许多地方做的不好，虽然也在断断续续的读书，但竟然没有一本是完整的读完的，耐心还是不够；下半年努力能做的好一些。上半年的代码也写的少了，继续努力。</p>
<h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><ul>
<li>未完成《你不知道的JavaScript中卷》</li>
<li>未完成“代码”部分</li>
<li>未完成上线新网站</li>
</ul>
]]></content>
      <tags>
        <tag>计划</tag>
      </tags>
  </entry>
  <entry>
    <title>学习和进步</title>
    <url>/post/life-learn/</url>
    <content><![CDATA[<p>毕业四年了，工作也整整四年了，总感觉自己学过的技术掌握的泛泛；当然这和我学习的态度以及工作的经历有很大的关系。虽然也在不停的学习，但苦于没有质的提升。</p>
<a id="more"></a>

<p>最近在一位<a href="http://agentzh.blogspot.com/2007/06/perl-6-synopses.html">前辈的影响下</a>，我开始慢慢的读别人的代码，或者说抄。因为进行的时间短，所以看不出来长期的结果是好是坏，但是在<code>抄</code>的过程中能明显的感觉到比单纯的<code>看</code>对源码的理解要深。因为如果用眼看的话，脑子的思考速度总是慢于眼看的速度，所以根本来不及思考。所以<code>抄</code>的时候对代码和文档的理解更深，或者说更正确。坚持几天下来觉得也还好，反正闲着也是闲着，既然看不进去书那就练练字也可以 :smile:。</p>
<p>既然感觉来了，等我抄完目前的<a href="https://github.com/expressjs/express">express</a>，我想把NodeJS文档学习一下。我还没有完整的看过NodeJS文档，每次都是用<code>google</code>去查。</p>
<p>努力吧。</p>
]]></content>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo文章置顶</title>
    <url>/post/hexo-topstick/</url>
    <content><![CDATA[<p>借助**<a href="https://ehlxr.me/2016/08/30/%E4%BD%BF%E7%94%A8Hexo%E5%9F%BA%E4%BA%8EGitHub-Pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%89%EF%BC%89/#%E5%8D%81%E3%80%81%E5%8D%9A%E6%96%87%E7%BD%AE%E9%A1%B6">别人的代码</a>**添加了添加了置顶功能, 写在这里以备忘:</p>
<a id="more"></a>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> pagination = <span class="built_in">require</span>(<span class="string">&#x27;hexo-pagination&#x27;</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">locals</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> config = <span class="built_in">this</span>.config;</span><br><span class="line">  <span class="keyword">var</span> posts = locals.posts;</span><br><span class="line"></span><br><span class="line">  posts.data.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">post, idx</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (post.top) &#123;</span><br><span class="line">      post.title = <span class="string">&#x27;[置顶]&#x27;</span> + post.title;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  posts.data = posts.data.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a.top &amp;&amp; b.top) &#123; <span class="comment">// 两篇文章top都有定义</span></span><br><span class="line">      <span class="keyword">if</span> (a.top == b.top) <span class="keyword">return</span> b.date - a.date; <span class="comment">// 若top值一样则按照文章日期降序排</span></span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">return</span> b.top - a.top; <span class="comment">// 否则按照top值降序排</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (a.top &amp;&amp; !b.top) &#123; <span class="comment">// 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）</span></span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (!a.top &amp;&amp; b.top) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> b.date - a.date; <span class="comment">// 都没定义按照文章日期降序排</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">var</span> paginationDir = config.pagination_dir || <span class="string">&#x27;page&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> pagination(<span class="string">&#x27;&#x27;</span>, posts, &#123;</span><br><span class="line">    perPage: config.index_generator.per_page,</span><br><span class="line">    layout: [<span class="string">&#x27;index&#x27;</span>, <span class="string">&#x27;archive&#x27;</span>],</span><br><span class="line">    format: paginationDir + <span class="string">&#x27;/%d/&#x27;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      __index: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><em>替换<code>hexo-generate-index</code> 插件中的 <code>lib/generate.js</code></em></p>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu个人配置</title>
    <url>/post/linux-ubuntu-settings/</url>
    <content><![CDATA[<blockquote>
<p>Ubuntu版本: 16.04</p>
</blockquote>
<p>每次使用一个新的Ubuntu系统时，总需要将之前的配置一个一个的移动过来，但是时间久了，有些配置都忘了怎么配了，所以我将我个人习惯的配置记录在这里。</p>
<a id="more"></a>

<h2 id="键位映射"><a href="#键位映射" class="headerlink" title="键位映射"></a>键位映射</h2><p>使用<code>xmodmap</code>来修改<code>Escape</code>和<code>Caps_Lock</code>键，创建<code>$HOME/.Xmodmap</code>文件，并将下列配置写入文件:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">keycode 66 = Caps_Lock</span><br><span class="line">keycode 9 = Escape</span><br><span class="line">remove Lock = Caps_Lock</span><br><span class="line">add Lock = Escape</span><br><span class="line">keycode 9 = Caps_Lock</span><br><span class="line">keycode 66 = Escape</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>执行<code>xmodmap ~/.Xmodmap</code>可以立即生效<br>可以使用<a href="https://www.x.org/archive/X11R7.7/doc/man/man1/xev.1.xhtml">xev</a>查看<code>keycode</code></p>
<h3 id="Visual-Studio-Code映射失败"><a href="#Visual-Studio-Code映射失败" class="headerlink" title="Visual Studio Code映射失败"></a><code>Visual Studio Code</code>映射失败</h3><p>但是，系统的键虽然映射成功了，<code>VSC</code>的键却出现了异常；<code>VSC</code>的版本是<code>1.11.2</code>，后来在<a href="https://github.com/Microsoft/vscode/issues/23991">这里</a>找到了答案，<br>添加了一个配置:<code>&quot;keyboard.dispatch&quot;: &quot;keyCode&quot;</code></p>
<h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p>我习惯用两种字体: <code>Consolas</code>和<code>Source Code Pro</code>;字体下载好以后，把它们复制到<code>/usr/share/fonts</code>目录下，执行下面的命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">fc-cache -f -v</span><br></pre></td></tr></table></figure>
<p>字体就可以使用了。</p>
<h2 id="zshrc"><a href="#zshrc" class="headerlink" title="zshrc"></a>zshrc</h2><ul>
<li>bindkey -v #zsh vi 模式</li>
</ul>
<h2 id="Unity"><a href="#Unity" class="headerlink" title="Unity"></a>Unity</h2><ul>
<li>调整Launcher的位置:<br>  <code>gsettings set com.canonical.Unity.Launcher launcher-position Bottom[Left]</code></li>
</ul>
<h2 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h2><ol>
<li>安装<code>.deb</code>包<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo dpkg -i &lt;file&gt;.deb</span><br><span class="line">sudo apt-get install -f # Install dependencies</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <tags>
        <tag>linux</tag>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>博客自动化</title>
    <url>/post/blog-ci/</url>
    <content><![CDATA[<p>  前一段时间在<a href="https://www.linode.com/">Linode</a>上买了一台最低配的服务器，大概每个月5刀，想在上面玩儿一些有意思的东西。随后我把博客放在了上面。博客是用<code>hexo</code>建的，最开始托管在<code>Github Pages</code>，用<code>Travis</code>自动发布。迁移到新的服务器上后，使用的还是<code>Travis</code>自动生成的静态页面，只是需要手动下载<code>Travis</code>生成的静态页面。</p>
<a id="more"></a>

<blockquote>
<p>其实所谓的博客有点儿名不副实，只是我自己想尝试一下新的东西，博客内容连鸡肋都算不上。</p>
</blockquote>
<p>  今天周末，趁着闲时间就利用<a href="https://developer.github.com/webhooks/">Github Webhook</a>写了一个自动同步静态页面的服务，<br>但是没想到这么几行<a href="https://github.com/polunzh/app/tree/master/githubhooks">代码</a>竟然花了半天的时间。</p>
<p>  今天的时间用完了，下次有时间修改成直接用<code>hexo</code>生成，不再使用<code>Travis</code>了。</p>
]]></content>
      <tags>
        <tag>扯淡</tag>
      </tags>
  </entry>
  <entry>
    <title>利用Ngin配置二级域名</title>
    <url>/post/nginx-proxy-inuse/</url>
    <content><![CDATA[<p>添加一个了二级域名，使用Nginx作为代理，配置如下：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">server_name</span> 域名;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> 域名映射的url地址;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Bash 移动快捷键</title>
    <url>/post/bash-move-shortcuts/</url>
    <content><![CDATA[<h2 id="Bash-移动快捷键备忘"><a href="#Bash-移动快捷键备忘" class="headerlink" title="Bash 移动快捷键备忘"></a>Bash 移动快捷键备忘</h2><p><em>昨天（2017年4月4日）发现<code>bash</code>默认的快捷键是<code>emacs</code>的，可以设置成<code>vi</code>: <code>set -o vi</code>, <code>zsh</code>设置成<code>vi</code>是: <code>bindkey -v</code></em></p>
<p><em>下面是emacs的模式：</em></p>
<blockquote>
<p>总是在<code>Windows</code>上用<code>git bash</code>操作<code>git</code>的时候嫌用方向键移动麻烦，所以在这里简单的总结一下<code>bash</code>的移动命令</p>
</blockquote>
<a id="more"></a>

<table>
<thead>
<tr>
<th>快捷键</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Ctrl + A</td>
<td>Go to the beginning of the line you are currently typing on</td>
</tr>
<tr>
<td>Ctrl + E</td>
<td>Go to the end of the line you are currently typing on</td>
</tr>
<tr>
<td>Ctrl + L</td>
<td>Clears the Screen, similar to the clear command</td>
</tr>
<tr>
<td>Ctrl + U</td>
<td>Clears the line before the cursor position. If you are at the end of the line, clears the entire line.</td>
</tr>
<tr>
<td>Ctrl + H</td>
<td>Same as backspace</td>
</tr>
<tr>
<td>Ctrl + R</td>
<td>Let’s you search through previously used commands</td>
</tr>
<tr>
<td>Ctrl + C</td>
<td>Kill whatever you are running</td>
</tr>
<tr>
<td>Ctrl + D</td>
<td>Exit the current shell</td>
</tr>
<tr>
<td>Ctrl + Z</td>
<td>Puts whatever you are running into a suspended background process. fg restores it.</td>
</tr>
<tr>
<td>Ctrl + W</td>
<td>Delete the word before the cursor</td>
</tr>
<tr>
<td>Ctrl + K</td>
<td>Clear the line after the cursor</td>
</tr>
<tr>
<td>Ctrl + T</td>
<td>Swap the last two characters before the cursor</td>
</tr>
<tr>
<td>Esc + T</td>
<td>Swap the last two words before the cursor</td>
</tr>
<tr>
<td>Alt + F</td>
<td>Move cursor forward one word on the current line</td>
</tr>
<tr>
<td>Alt + B</td>
<td>Move cursor backward one word on the current line</td>
</tr>
<tr>
<td>Tab</td>
<td>Auto-complete files and folder names</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>Bash</tag>
      </tags>
  </entry>
  <entry>
    <title>博客墙</title>
    <url>/post/resource-blogwall/</url>
    <content><![CDATA[<blockquote>
<p>这里收集了一些我喜欢的博客地址，会长期更新。</p>
</blockquote>
<h2 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h2><ul>
<li><a href="https://github.com/ljianshu/Blog">ljianshu-前端博客</a> <em>2019-05-05 08:45:50</em></li>
<li><a href="https://github.com/kilimchoi/engineering-blogs">engineering-blogs</a></li>
<li><a href="http://agentzh.blogspot.com/">agentzh</a> <a href="https://yichunzhang.wordpress.com/">wordpress</a></li>
<li><a href="https://livid.v2ex.com/">Livid</a></li>
<li><a href="http://tjholowaychuk.com/">tj</a></li>
<li><a href="http://e.xitu.io/">e.xitu.io</a></li>
<li><a href="http://2ality.com/index.html">2ality</a></li>
<li><a href="http://coolshell.cn/">酷壳</a></li>
<li><a href="http://blog.codingnow.com/">云风的Blog</a><br>  <a href="https://blog.codingnow.com/cloud/PassedDays">https://blog.codingnow.com/cloud/PassedDays</a></li>
<li><a href="http://calvin1978.blogcn.com/">花钱的年华</a><a id="more"></a></li>
<li><a href="https://github.com/creeperyang/blog/issues">creeperyang/blog</a></li>
<li><a href="https://github.com/sorrycc/blog/issues">sorrycc/blog</a></li>
<li><a href="https://github.com/lifesinger/blog/issues">lifesinger/blog</a></li>
<li><a href="https://github.com/xufei/blog/issues">xufei/blog</a></li>
<li><a href="https://jysperm.me/">王子亭的博客</a></li>
<li><a href="http://blog.cnbang.net/">bang’s blog</a></li>
</ul>
<h2 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h2><ul>
<li><a href="https://nodeschool.io/zh-cn/">NodeSchool</a></li>
</ul>
<h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><ul>
<li><a href="https://awesomeopensource.com/project/phodal/microfrontends">微前端的那些事儿</a></li>
</ul>
<h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><ul>
<li><a href="https://techiedelight.quora.com/500-Data-Structures-and-Algorithms-practice-problems-and-their-solutions">500-Data-Structures-and-Algorithms-practice-problems-and-their-solutions</a></li>
</ul>
<h2 id="美图"><a href="#美图" class="headerlink" title="美图"></a>美图</h2><ul>
<li><a href="https://unsplash.com/">unsplash</a></li>
</ul>
<h2 id="RFC"><a href="#RFC" class="headerlink" title="RFC"></a>RFC</h2><ul>
<li><a href="https://tools.ietf.org/html/rfc2616">HTTP/1.1</a></li>
</ul>
<h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><ul>
<li><a href="http://www.tldp.org/HOWTO/TCP-Keepalive-HOWTO/">TCP-Keepalive-HOWTO</a></li>
</ul>
<h2 id="因吹斯听"><a href="#因吹斯听" class="headerlink" title="因吹斯听"></a>因吹斯听</h2><ul>
<li><a href="http://desk.cmiscm.com/">晒桌面</a></li>
</ul>
<h2 id="实用"><a href="#实用" class="headerlink" title="实用"></a>实用</h2><ul>
<li><a href="https://github.com/alvarcarto/url-to-pdf-api">url to pdf</a></li>
</ul>
<h2 id="命令行-amp-shell"><a href="#命令行-amp-shell" class="headerlink" title="命令行 &amp; shell"></a>命令行 &amp; shell</h2><ul>
<li><a href="https://www.kancloud.cn/thinkphp/linux-command-line/39431">The Linux Commandline 中文版</a></li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li><a href="https://undefinedblog.com/set-timeout-for-mocha-with-karma/">undefined</a></li>
<li><a href="http://viewsourcecode.org/snaptoken/kilo/index.html">write a editor by c</a></li>
</ul>
]]></content>
      <tags>
        <tag>博客</tag>
        <tag>资源</tag>
        <tag>备忘</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6 Exploring 笔记</title>
    <url>/post/es6exploring/</url>
    <content><![CDATA[<h2 id="Core-ES6-feature"><a href="#Core-ES6-feature" class="headerlink" title="Core ES6 feature"></a>Core ES6 feature</h2><blockquote>
<p><a href="http://exploringjs.com/es6/index.html">exploringjs笔记</a></p>
</blockquote>
<ol>
<li>var to let/const</li>
</ol>
<blockquote>
<p>优先使用<code>const</code>, 只要值不再改变的变量就用<code>const</code>；否则用<code>let</code>；避免用<code>var</code>。</p>
</blockquote>
<a id="more"></a>

<ol start="2">
<li>IIFEs to blocks</li>
</ol>
<p>如果在ES5中想限制变量在一个块作用域中，你需要使用一个叫做IIFE(Immediately-Invoked Function Expression)的模式：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> tmp...</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure>

<p>在ES6中只需要使用一个块声明或者一个const声明就行了：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> tmp = ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>字符串插值</li>
</ol>
<p>避免字符串拼接, 以及多行字符串。</p>
<ol start="4">
<li>函数表达式 to 箭头函数</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">UiComponent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> button = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;mybutton&#x27;</span>);</span><br><span class="line">    button.on(<span class="string">&#x27;click&#x27;</span>, <span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;CLICK&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.handleClick(); <span class="comment">//  这里的this是UiComponent的this，还不知道为什么</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>处理多个返回值</li>
</ol>
<p>使用数组返回多个值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [, year, month, day] = <span class="regexp">/^(\d\d\d\d)-(\d\d)-(\d\d)$/</span>.exec(<span class="string">&#x27;2019-12-21&#x27;</span>);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>上面例子中数组的第一个逗号是为了跳过数组第一个元素，因为<code>/^(\d\d\d\d)-(\d\d)-(\d\d)$/.exec(&#39;2019-12-21&#39;)</code><br>返回的是<code>[&quot;2019-12-21&quot;, &quot;2019&quot;, &quot;12&quot;, &quot;21&quot;]</code></p>
</blockquote>
<p>使用<code>objects</code>返回多个值</p>
<blockquote>
<p>所谓的解构<code>Destructuring</code></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;writable, configurable&#125; = <span class="built_in">Object</span>.getOwnPropertyDescriptor(foo, <span class="string">&#x27;foo&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>使用<code>for-of</code>替换<code>for</code>和<code>forEach</code><blockquote>
<p><code>for</code>循环的优势是可以被中断(break)，<code>forEach</code>简洁, 而<code>for-of</code>兼顾了<code>for</code>,<code>forEach</code>的优点</p>
</blockquote>
</li>
</ol>
<p>如果同时需要索引和值，可以使用<code>Array</code>的<code>entries</code>:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> [index, elem] <span class="keyword">of</span> arr.entries()) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;index&#125;</span>, <span class="subst">$&#123;elem&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="7">
<li><p>使用参数默认值</p>
<blockquote>
<p>ES6中只有<code>undefined</code>才能触发默认值</p>
</blockquote>
</li>
<li><p>命名参数</p>
</li>
</ol>
<p>通过字面对象实现（所谓的<code>可选对象模式</code>）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">selectEntries</span>(<span class="params"> &#123; start=<span class="number">0</span>, end=<span class="number">1</span>, step=<span class="number">1</span> &#125;</span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<ol start="9">
<li>剩余参数(Rest Parameters)<blockquote>
<p>使用<code>...</code>操作符实现</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logAllArguments</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> arg <span class="keyword">of</span> args) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;---&#x27;</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(arg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>可选参数:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">selectEntries</span>(<span class="params">&#123; start=<span class="number">0</span>, end=<span class="number">-1</span>, step=<span class="number">1</span> &#125; = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">    ···</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="10">
<li>展开操作符<code>...</code>替换<code>apply()</code></li>
</ol>
<blockquote>
<p>在ES5中，将数组转换为参数使用<code>apply()</code>, ES6中可以使用<code>...</code></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.max(...[<span class="number">1</span>, <span class="number">21</span>, <span class="number">2</span>, <span class="number">-10</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr1 = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>];</span><br><span class="line"></span><br><span class="line">arr1.push.apply(arr1, arr2); <span class="comment">// arr1=[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;] ES5</span></span><br><span class="line">arr1.push(...arr2); <span class="comment">// arr1=[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;] ES6</span></span><br></pre></td></tr></table></figure>

<ol start="11">
<li>展开操作符<code>...</code>替换<code>concat()</code></li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ar1 = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> ar2 = [<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> ar3 = [<span class="string">&#x27;d&#x27;</span>];</span><br><span class="line"><span class="built_in">console</span>.log([...ar1, ...ar2, ...ar3]);</span><br></pre></td></tr></table></figure>

<ol start="12">
<li><p>在字面对象中，用定义方法的方式替换函数表达式</p>
</li>
<li><p>类替换构造函数(From constructors to classes)</p>
</li>
</ol>
<p>Base classes</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    describe() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Person called&#x27;</span> + <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Derived classes</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name, title) &#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">        <span class="built_in">this</span>.title = title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    describe() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.describe() + <span class="string">&#x27;(&#x27;</span> + <span class="built_in">this</span>.title + <span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="14">
<li>使用继承<code>Error</code>类的方式的替换<code>自定义error构造函数</code></li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyError</span> <span class="keyword">extends</span> <span class="title">Error</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<ol start="15">
<li>使用内置的Map数据结构</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">countWords</span>(<span class="params">word</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> count = map[word] || <span class="number">0</span>;</span><br><span class="line">    map.set(word, count + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ES5:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> dict = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">countWords</span>(<span class="params">word</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> escapeKey = escapeKey(word);</span><br><span class="line">    <span class="keyword">if</span>(escapeKey <span class="keyword">in</span> dict) &#123;</span><br><span class="line">        dict[escapeKey]++;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        dict[escapeKey] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escapeKey</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(key.indexOf(<span class="string">&#x27;__proto__&#x27;</span>) === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> key + <span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> key;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>而且Map的key可以不是字符串</em></p>
<ol start="16">
<li><p>新的字符串方法</p>
<ul>
<li>startsWith()</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">str.indexOf(s) === <span class="number">0</span>; <span class="comment">// ES5</span></span><br><span class="line">str.startsWith(s); <span class="comment">// ES6</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>endsWith()</p>
</li>
<li><p>includes()</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">str.indexOf(<span class="string">&#x27;s&#x27;</span>) &gt;=<span class="number">0</span>; <span class="comment">// ES5</span></span><br><span class="line">str.includes(<span class="string">&#x27;s&#x27;</span>); <span class="comment">// ES6</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>repeat()</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>+<span class="number">1</span>).join(<span class="string">&#x27;#&#x27;</span>); <span class="comment">// ES5, hack</span></span><br><span class="line"><span class="string">&#x27;#&#x27;</span>.repeat(<span class="number">3</span>); <span class="comment">// ES6</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>新的数组方法</p>
<ul>
<li>Array.prototype.indexOf -&gt; Array.prototype.findIndex<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="literal">NaN</span>];</span><br><span class="line"></span><br><span class="line">arr.indexOf(<span class="literal">NaN</span>); <span class="comment">// -1</span></span><br><span class="line">arr.findIndex( <span class="function"><span class="params">x</span>=&gt;</span> <span class="built_in">Number</span>.isNan(x))); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>Number.isNaN() 是比 isNaN() 更安全的方法，因为isNaN会强制转型*<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">isNaN</span>(<span class="string">&#x27;a&#x27;</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Number</span>.isNaN(<span class="string">&#x27;a&#x27;</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>Array.prototype.slice() -&gt; Array.from(),或者使用展开操作符(<code>...</code>)</li>
</ul>
<blockquote>
<p>在ES5中，<code>Array.prototype.slice</code>方法用来将类数组对象转换为数组;<br>如果一个值是可迭代的，也可以使用展开操作符来转换</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>); <span class="comment">// ES5</span></span><br><span class="line"><span class="keyword">const</span> arr2 = <span class="built_in">Array</span>.from(<span class="built_in">arguments</span>)</span><br><span class="line"><span class="keyword">const</span> arr3 = [...arguments]</span><br></pre></td></tr></table></figure>

<ul>
<li>apply() -&gt; Array.fill()</li>
</ul>
<blockquote>
<p>在<code>ES5</code>中可以是用<code>apply</code>的<code>hack</code>方式来创建任意长度的<code>undefined</code>数组</p>
</blockquote>
<p>ES5:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.apply(<span class="literal">undefined</span>, <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">2</span>));</span><br></pre></td></tr></table></figure>

<p>ES5:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">2</span>).fill(<span class="literal">undefined</span>)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<ul>
<li>CommonJS modules -&gt; ES6 modules</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">from</span> <span class="string">&#x27;lib&#x27;</span></span><br></pre></td></tr></table></figure>

<p>Single exports</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Modules"><a href="#Modules" class="headerlink" title="Modules"></a>Modules</h2><ol>
<li>Single export</li>
</ol>
<p>导出默认匿名对象不需要分号</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125; <span class="comment">// 没有分号</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> </span>&#123;...&#125; <span class="comment">// 没有分号</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li><code>Modules</code>是单例</li>
</ol>
<p>即使被导入多次，只有一个实例存在</p>
<ol start="3">
<li><p>ECMAScript 5 modules systems</p>
<ul>
<li><p>CommonJS Modules</p>
<blockquote>
<p>主导该规范实现的是NodeJS</p>
</blockquote>
<p>  <em>特点</em></p>
<ul>
<li>紧凑语法(Compact syntax)</li>
<li>服务器端同步加载</li>
</ul>
</li>
<li><p>Asynchronous Module Definition(AMD)</p>
<blockquote>
<p><code>RequireJS</code>是该规范最流行的实现</p>
</blockquote>
<p>  <em>特点</em></p>
<ul>
<li>稍比较复杂的语法，在适使用<code>eval()</code>的情况下使<code>AMD</code>工作</li>
<li>为服务器端和浏览器端异步加载设计</li>
</ul>
</li>
</ul>
</li>
<li><p>ECMAScript 6 modules</p>
</li>
</ol>
<blockquote>
<p>两种导出方法：命名导出（一个模块可以导出多个），<code>default exports</code>（每个模块导出一个），<br>可以混用，但是尽量分开。</p>
</blockquote>
]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Git备忘</title>
    <url>/post/git-note/</url>
    <content><![CDATA[<p><em>部分命令参考了<a href="http://www.cnblogs.com/EasonWu/archive/2012/11/27/git-windows-setup-by-cygwin.html">这篇文章</a></em></p>
<h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><p><code>配置命令别名</code>:</p>
<blockquote>
<p><code>git config --system alias.&#123;short name&#125; &#123;origin name&#125;</code></p>
</blockquote>
<a id="more"></a>

<p><code>列出所有别名配置</code>:</p>
<blockquote>
<p><code>git config --get-regexp alias</code></p>
</blockquote>
<p><code>解决Git命令输出中文文件名的显示问题</code>:<br><code>git config --system core.quotepath false</code></p>
<p><code>Git命令输出中开启颜色显示</code>:<br><code>git config --system color.ui true</code></p>
<p><code>打标签</code>:</p>
<ul>
<li>轻量级标签 <code>git tag &#123;tagname&#125;</code></li>
<li>含附注标签 <code>git tag -a &#123;tagname&#125; -m &#123;annotation&#125;</code></li>
<li>推送分支 <code>git push origin &#123;tagname&#125;</code></li>
<li>推送所有分支 <code>git push origin --tags</code></li>
</ul>
<p><code>重命名分支</code>:</p>
<ul>
<li>命名任何一个分支 <code>git branch -m &#123;oldname&#125; &#123;newname&#125;</code></li>
<li>命名当前分支 <code>git branch -m &#123;newname&#125;</code></li>
</ul>
<p><code>设置默认编辑器</code></p>
<ul>
<li><code>git config --system core.editor &#123;editor&#125;</code></li>
</ul>
<p><code>删除远程分支</code>:</p>
<ul>
<li><code>git push origin --delete &#123;branch name&#125;</code></li>
<li><code>git push origin :&#123;branch name&#125;</code></li>
</ul>
<p><code>删除文件</code>:</p>
<ul>
<li>从仓库中以及从文件系统中删除文件: <code>git rm &#123;file name&#125;</code></li>
<li>仅从仓库中删除文件: <code>git rm --cached &#123;file name&#125;</code></li>
</ul>
<p><code>删除远程不存在的本地分支引用</code>:</p>
<blockquote>
<p><a href="https://git-scm.com/docs/git-fetch#git-fetch--p">git fetch -p(–prune)</a></p>
</blockquote>
<p><code>合并最近n次提交</code>:</p>
<blockquote>
<p><code>git rebase --interactive HEAD~n</code><br><a href="http://stackoverflow.com/questions/2563632/how-can-i-merge-two-commits-into-one">http://stackoverflow.com/questions/2563632/how-can-i-merge-two-commits-into-one</a></p>
</blockquote>
<p><code>列出没有合并的文件</code></p>
<blockquote>
<p><code>git diff --name-status --diff-filter=U</code></p>
</blockquote>
<h3 id="rebase"><a href="#rebase" class="headerlink" title="rebase"></a>rebase</h3><h4 id="应用场景1–将当前分支重新base到最新master"><a href="#应用场景1–将当前分支重新base到最新master" class="headerlink" title="应用场景1–将当前分支重新base到最新master"></a>应用场景1–将当前分支重新base到最新master</h4><p>这样就不用<code>merge</code>了，保持当前分支的纯净。根据需要<code>rebase</code>到合适的分支。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git rebase &#123;branch name&#125;</span><br></pre></td></tr></table></figure>

<h4 id="应用场景2–合并提交"><a href="#应用场景2–合并提交" class="headerlink" title="应用场景2–合并提交"></a>应用场景2–合并提交</h4><p>根据习惯/要求不同，可以删除一些当前分支临时性的提交，以保持提交记录的漂亮。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git rebase --interactive HEAD~n # 以交互的方式rebase最近n次提交</span><br></pre></td></tr></table></figure>

<h3 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h3><ul>
<li><code>git shortlog</code>: 总结 <code>git log</code> 的输出</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git shortlog -sne</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> output</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git shortlog -sne</span></span><br><span class="line">    54  zhenqiang &lt;zhangzq@zigzen.cn&gt;</span><br><span class="line">    13  polun &lt;965076377@qq.com&gt;</span><br><span class="line">    12  polunzh &lt;polunzh@gmail.com&gt;</span><br><span class="line">     9  zhangzhenqiang &lt;zhangzq@zhicang.market&gt;</span><br><span class="line">     1  polunzh &lt;polunzh@gmailc.com&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>git log --author=&quot;&lt;pattern&gt;</code> 列出该提交者 <code>committer</code> 的记录</li>
</ul>
<h2 id="配置相关"><a href="#配置相关" class="headerlink" title="配置相关"></a>配置相关</h2><ul>
<li>列出所有别名: git config –get-regexp alias</li>
</ul>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ol>
<li><code>git status</code> 乱码 <code>git config --global core.quotepath false</code></li>
</ol>
<h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><h3 id="存储凭证"><a href="#存储凭证" class="headerlink" title="存储凭证"></a>存储凭证</h3><p>存储选项</p>
<ol>
<li>默认不存储</li>
<li><code>cache</code> 存储在内存， 15 分钟后从内从中清除，该选项后有一个 <code>--timeout &lt;seconds&gt;</code> 参数</li>
<li><code>store</code> 以明文的方式存储在磁盘，永远不会过期， 该选项后有个 <code>--file &lt;path&gt;</code> 参数</li>
</ol>
<blockquote>
<p>还有其它两种分别针对于 <code>Windows</code> 和 <code>OSX</code> 平台的配置，但是我从来没用过，所以我就不在这里记了。</p>
</blockquote>
<p><code>Example:</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global credential.helper cache --timeout 9000</span><br><span class="line">git config --global credential.helper store --file &#x27;~/.myfile&#x27;</span><br></pre></td></tr></table></figure>

<h3 id="refusing-to-merge-unrelated-histories-错误"><a href="#refusing-to-merge-unrelated-histories-错误" class="headerlink" title="refusing to merge unrelated histories 错误"></a><code>refusing to merge unrelated histories</code> 错误</h3><blockquote>
<p>From: <a href="http://blog.csdn.net/lindexi_gd/article/details/52554159">http://blog.csdn.net/lindexi_gd/article/details/52554159</a></p>
</blockquote>
<p>在 <code>pull</code> 远程数据的时候出现 <code>refusing to merge unrelated histories</code> 错误，这是因为远程仓库和本地仓库不是同一个仓库的原因，如果确信要合并，可以在 <code>pull</code> 的时候使用 <code>--allow-unrelated-histories</code> 参数:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git pull origin master --allow-unrelated-histories</span><br></pre></td></tr></table></figure>

<h3 id="RPC-failed-result-22-HTTP-code-411-错误"><a href="#RPC-failed-result-22-HTTP-code-411-错误" class="headerlink" title="RPC failed; result=22, HTTP code = 411 错误"></a><code>RPC failed; result=22, HTTP code = 411</code> 错误</h3><blockquote>
<p>From: <a href="https://stackoverflow.com/questions/12651749/git-push-fails-rpc-failed-result-22-http-code-411">https://stackoverflow.com/questions/12651749/git-push-fails-rpc-failed-result-22-http-code-411</a></p>
</blockquote>
<p>这是因为 <code>Git</code> 默认的配置将某些 <code>HTTP</code> 操做限制为 1M 字节，修改默认限制：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config http.postBuffer *bytes*</span><br></pre></td></tr></table></figure>

<h3 id="有用的命令"><a href="#有用的命令" class="headerlink" title="有用的命令"></a>有用的命令</h3><ol>
<li>搜索<code>IP</code>: <code>git grep -E &quot;\b([0-9]&#123;1,3&#125;\.)&#123;3&#125;[0-9]&#123;1,3&#125;\b&quot;</code></li>
</ol>
]]></content>
      <tags>
        <tag>git</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript常用数组迭代方法</title>
    <url>/post/js-array/</url>
    <content><![CDATA[<h1 id="JavaScript-数组操作"><a href="#JavaScript-数组操作" class="headerlink" title="JavaScript 数组操作"></a>JavaScript 数组操作</h1><blockquote>
<p>原文: <a href="https://gist.github.com/ljharb/58faf1cfcb4e6808f74aae4ef7944cff">https://gist.github.com/ljharb/58faf1cfcb4e6808f74aae4ef7944cff</a></p>
</blockquote>
<p><code>forEach</code></p>
<ul>
<li><code>callback</code>回答: 给你一个值, 随便你对它做什么, 我不管</li>
<li><code>callback</code>参数: <code>item</code>, <code>index</code>, <code>list</code></li>
<li>最终返回值: 啥也没有, <code>undefined</code></li>
<li>代码示例:</li>
</ul>
<a id="more"></a>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;zhang&#x27;</span>, <span class="string">&#x27;zhen&#x27;</span>, <span class="string">&#x27;qiang&#x27;</span>].forEach(<span class="function">(<span class="params">val, index, thisArg</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(index, val);</span><br><span class="line">    <span class="built_in">console</span>.log(thisArg);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><code>map</code>:</p>
<ul>
<li><em>callback回答</em>: here’s an item. what should i put in the new list in its place(翻译不好)？</li>
<li><em>callback 有这些参数</em>: <code>item</code>, <code>index</code>, <code>list</code></li>
<li><em>最终的返回值</em>: 新项的列表</li>
<li><em>代码示例</em><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> objects = [&#123; <span class="attr">id</span>: <span class="string">&#x27;a&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;chengyaojin&#x27;</span> &#125;, &#123; <span class="attr">id</span>: <span class="string">&#x27;b&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;zhangjunhui&#x27;</span> &#125;, &#123; <span class="attr">id</span>: <span class="string">&#x27;c&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;zhangzhenqiang&#x27;</span> &#125;];</span><br><span class="line"><span class="keyword">const</span> res = objects.map(<span class="function">(<span class="params">item, index, list</span>) =&gt;</span> &#123;</span><br><span class="line">    item[<span class="string">&#x27;ctime&#x27;</span>] = <span class="built_in">Date</span>.now();</span><br><span class="line">    <span class="keyword">return</span> item;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(res);</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><code>filter</code>:</p>
<ul>
<li><em>callback是个谓词</em> - 应该返回真值或假值</li>
<li><em>callback回答</em>: 我应该保留这个值吗？</li>
<li><em>callback有这些参数</em>: <code>item</code>, <code>index</code>, <code>list</code></li>
<li><em>最终返回值</em>: 保留下来的值</li>
<li><em>代码示例</em>:</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ints = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">const</span> events = ints.filter(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> item % <span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(ints === events, events);</span><br></pre></td></tr></table></figure>

<p><code>reduce</code>:</p>
<ul>
<li><code>callback</code> 回答(answers): 这是前一次迭代的返回结果，我应该继续下去吗？</li>
<li><code>callback</code>的参数: <code>result</code>, <code>item</code>, <code>index</code>, <code>list</code></li>
<li>最后的返回结果：上一次的迭代结果</li>
<li>代码示例：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 注意：`reduce`和`reduceRight`在`callback`参数后都一个可选的`initalValue`参数,</span></span><br><span class="line"><span class="comment">// 如果忽略不填，则默认是第一项的值</span></span><br><span class="line"><span class="keyword">const</span> sum = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].reduce(<span class="function">(<span class="params">result, item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> result += item;</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sum);</span><br></pre></td></tr></table></figure>

<p><code>reduceRight</code>: 和<code>reduce</code>相同，只不过遍历的方向是相反的方向</p>
<p><code>some</code>:</p>
<ul>
<li><code>callback</code>是个谓词(<code>predicate</code>) - 应该返回真值或假值</li>
<li><code>callback</code>回答(<code>answers</code>): 这个值满足需求吗？</li>
<li><code>callback</code>的参数: <code>item</code>, <code>index</code>, <code>list</code></li>
<li>最终返回值: 如果找到满足需求的值则返回<code>true</code>,否则返回<code>false</code></li>
<li><code>注意</code>: 如果<code>callback</code>返回<code>true</code>则会停止迭代</li>
<li>代码示例:</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> hasNegativeNumbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">-1</span>, <span class="number">4</span>].some(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> item &lt; <span class="number">0</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(hasNegativeNumbers);</span><br></pre></td></tr></table></figure>

<p><code>every</code>:</p>
<ul>
<li><code>callback</code> 是个谓词 - 返回真值(truthy)或假值(falsy)</li>
<li><code>callback</code>回答(<code>answers</code>): 这个值满足需求吗？</li>
<li><code>callback</code>的参数: <code>item</code>, <code>index</code>, <code>list</code></li>
<li>最终返回值: 如果找到满足需求的值则返回<code>true</code>,否则返回<code>false</code></li>
<li><code>注意</code>: 如果<code>callback</code>返回<code>false</code>则会停止迭代</li>
<li>代码示例:</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> allPositiveNumbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">-1</span>, <span class="number">4</span>].every(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> item &gt; <span class="number">0</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(allPositiveNumbers);</span><br></pre></td></tr></table></figure>

<p><code>find</code>:</p>
<ul>
<li><code>callback</code> 是个谓词 - 返回真值(truthy)或假值(falsy)</li>
<li><code>callback</code> 回答：这是你要找的值吗？</li>
<li><code>callback</code>的参数: <code>item</code>, <code>index</code>, <code>list</code></li>
<li>最终返回值：如果能找到，则返回该项，否则返回<code>undefined</code></li>
<li><strong>注意</strong>: 一旦<code>callback</code>函数返回真值，迭代就会停止</li>
<li>代码示例:</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> objects = [&#123; <span class="attr">id</span>: <span class="string">&#x27;a&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;chengyaojin&#x27;</span> &#125;, &#123; <span class="attr">id</span>: <span class="string">&#x27;b&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;zhangjunhui&#x27;</span> &#125;, &#123; <span class="attr">id</span>: <span class="string">&#x27;c&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;zhangzhenqiang&#x27;</span> &#125;];</span><br><span class="line"><span class="keyword">const</span> res = objects.find(<span class="function">(<span class="params">item, index, list</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> item.id === <span class="string">&#x27;c&#x27;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(res);</span><br></pre></td></tr></table></figure>

<p><code>findIndex</code>:</p>
<ul>
<li><code>callback</code> 是个谓词 - 返回真值(truthy)或假值(falsy)</li>
<li><code>callback</code> 回答：这是你要找的值吗？</li>
<li><code>callback</code>的参数: <code>item</code>, <code>index</code>, <code>list</code></li>
<li>最终返回值：如果能找到，则返回该项的索引，否则返回<code>-1</code></li>
<li><strong>注意</strong>: 一旦<code>callback</code>函数返回真值，迭代就会停止</li>
<li>代码示例:</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> objects = [&#123; <span class="attr">id</span>: <span class="string">&#x27;a&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;chengyaojin&#x27;</span> &#125;, &#123; <span class="attr">id</span>: <span class="string">&#x27;b&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;zhangjunhui&#x27;</span> &#125;, &#123; <span class="attr">id</span>: <span class="string">&#x27;c&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;zhangzhenqiang&#x27;</span> &#125;];</span><br><span class="line"><span class="keyword">const</span> res = objects.findIndex(<span class="function">(<span class="params">item, index, list</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> item.id === <span class="string">&#x27;c&#x27;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(res);</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>常用npm包</title>
    <url>/post/fu-npm-package/</url>
    <content><![CDATA[<ul>
<li><a href="https://github.com/winstonjs/winston">winston</a></li>
<li><a href="https://github.com/jprichardson/string.js">string</a></li>
<li><a href="https://github.com/visionmedia/debug">debug</a></li>
<li><a href="https://github.com/expressjs/morgan">morgan</a></li>
</ul>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>Node.js</tag>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>我的VIM配置</title>
    <url>/post/myvimrc/</url>
    <content><![CDATA[<p>个人非常喜欢<code>Vim</code>的工作方式，所以有时间会研究一下，<br>下面是我自己的一些配置，我暂时没有修改<code>vim</code>默认的<code>vimrc</code>文件。</p>
<a id="more"></a>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">set relativenumber      &quot; Show relative numbers instead of absolute ones.</span><br><span class="line">set nocompatible        &quot; Disable vi compatibility.</span><br><span class="line">set undolevels=200      &quot; Number of undo levels.</span><br><span class="line">set scrolloff=10        &quot; Keep a context (rows) when scrolling vertically.</span><br><span class="line">set sidescroll=5        &quot; Keep a context (columns) when scrolling horizontally.</span><br><span class="line">set tabpagemax=1000     &quot; Maximum number of tabs to open by the -p argument.</span><br><span class="line">set esckeys             &quot; Cursor keys in insert mode.</span><br><span class="line">set incsearch</span><br><span class="line">set confirm             &quot; Ask to save file before operations like :q or :e fail.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot; Allow backspacing over everything in insert mode.</span></span><br><span class="line"><span class="string">set backspace=indent,eol,start</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">&quot; Backup and swap files.</span><br><span class="line">set nobackup            &quot; Disable backup files.</span><br><span class="line">set noswapfile          &quot; Disable swap files.</span><br><span class="line">set nowritebackup       &quot; Disable auto backup before overwriting a file.</span><br><span class="line"></span><br><span class="line"><span class="string">&quot; History</span></span><br><span class="line">set history=1000        &quot; Number of lines of command line history.</span><br><span class="line">set viminfo=&#x27;100,\&quot;500,r/mnt,r~/mnt,r/media &quot; Read/write a .viminfo file.</span><br><span class="line">set viminfo+=h          &quot; Do not store searches.</span><br><span class="line"></span><br><span class="line"><span class="string">&quot; Splitting.</span></span><br><span class="line">set splitright          &quot; Open new vertical panes in the right rather than left.</span><br><span class="line">set splitbelow          &quot; Open new horizontal panes in the bottom rather than top.</span><br><span class="line"></span><br><span class="line"><span class="string">&quot; Security.</span></span><br><span class="line">set secure              &quot; Forbid loading of .vimrc under $PWD.</span><br><span class="line">set nomodeline          &quot; Modelines have been a source of vulnerabilities.</span><br><span class="line"></span><br><span class="line">syntax on</span><br><span class="line">filetype indent on      &quot; Turn off indention by filetype.</span><br><span class="line"><span class="string">&quot; Override the previous settings for all file types (some filetype plugins set</span></span><br><span class="line">&quot; these options to different values, which is really annoying).</span><br><span class="line">au FileType * set autoindent nosmartindent nocindent fo+=q fo-=r fo-=o fo+=j</span><br><span class="line">set laststatus=2</span><br><span class="line"></span><br><span class="line"><span class="string">&quot; Whitespace.</span></span><br><span class="line">set tabstop=4           &quot; Number of spaces a tab counts for.</span><br><span class="line">set shiftwidth=4        &quot; Number of spaces to use for each step of indent.</span><br><span class="line">set shiftround          &quot; Round indent to multiple of shiftwidth.</span><br><span class="line">set expandtab           &quot; Expand tab with spaces.</span><br><span class="line"></span><br><span class="line"><span class="string">&quot; Wrapping.</span></span><br><span class="line">set wrap                &quot; Enable text wrapping.</span><br><span class="line">set linebreak           &quot; Break after words only.</span><br><span class="line">set display+=lastline   &quot; Show as much as possible from the last shown line.</span><br><span class="line">set textwidth=0         &quot; Don&#x27;t automatically wrap lines.</span><br><span class="line"><span class="string">&quot; Disable automatic wrapping for all files (some filetype plugins set this to</span></span><br><span class="line">&quot; a different value, which is really annoying).</span><br><span class="line">au FileType * set textwidth=0</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;------------------------------------------------------------------------------</span></span><br><span class="line">&quot; Typos correction.</span><br><span class="line"><span class="string">&quot;------------------------------------------------------------------------------</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">if has(&quot;multi_byte&quot;)</span><br><span class="line">    <span class="string">&quot; UTF-8 编码</span></span><br><span class="line"><span class="string">    set encoding=utf-8</span></span><br><span class="line"><span class="string">    set termencoding=utf-8</span></span><br><span class="line"><span class="string">    set formatoptions+=mM</span></span><br><span class="line"><span class="string">    set fencs=utf-8,gbk</span></span><br><span class="line"><span class="string">    if v:lang =~? &#x27;^/(zh/)/|/(ja/)/|/(ko/)&#x27;</span></span><br><span class="line"><span class="string">        set ambiwidth=double</span></span><br><span class="line"><span class="string">    endif</span></span><br><span class="line">    if has(&quot;win32&quot;)</span><br><span class="line">        source $VIMRUNTIME/delmenu.vim</span><br><span class="line">        source $VIMRUNTIME/menu.vim</span><br><span class="line">        language messages zh_CN.utf-8</span><br><span class="line">    endif</span><br><span class="line">else</span><br><span class="line">    echoerr &quot;Sorry, this version of (g)vim was not compiled with +multi_byte&quot;</span><br><span class="line">endif</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;---------------------------------------------</span></span><br><span class="line">&quot; 插件</span><br><span class="line"><span class="string">&quot;---------------------------------------------</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">&quot; NERDTree</span><br><span class="line"></span><br><span class="line"><span class="string">&quot; 打开vim是自动打开NERDTree</span></span><br><span class="line">&quot; autocmd vimenter * NERDTree</span><br><span class="line"></span><br><span class="line"><span class="string">&quot; 打开编辑器时鼠标默认在编辑区域</span></span><br><span class="line"><span class="string">autocmd vimenter * wincmd p</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">&quot;如果打开vim的时候没有指定文件，则自动打开NERDTree</span><br><span class="line"><span class="string">&quot; autocmd StdinReadPre * let s:std_in=1</span></span><br><span class="line">&quot; autocmd VimEnter * if argc() == 0 &amp;&amp; !exists(&quot;s:std_in&quot;) | NERDTree | endif</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;如果只剩下一个NERDTree窗口，则关闭vim</span></span><br><span class="line">autocmd bufenter * if (winnr(&quot;$&quot;) == 1 &amp;&amp; exists(&quot;b:NERDTree&quot;) &amp;&amp; b:NERDTree.isTabTree()) | q | endif</span><br><span class="line"></span><br><span class="line"><span class="string">&quot; 快捷键设置</span></span><br><span class="line"><span class="string">map &lt;C-b&gt; :NERDTreeToggle&lt;CR&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">&quot;Powerline configuration</span><br><span class="line"><span class="string">&quot; set guifont=Consolas_for_Powerline_FixedD:h10:cANSI</span></span><br><span class="line">&quot; set guifont=Liberation_Mono_for_Powerline:h10</span><br><span class="line"><span class="string">&quot; set encoding=utf-8</span></span><br><span class="line"><span class="string">set t_Co=256</span></span><br><span class="line"><span class="string">let g:Powerline_symbols = &#x27;fancy&#x27;</span></span><br><span class="line"><span class="string">let Powerline_symbols = &#x27;compatible&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>常用工具</title>
    <url>/post/common-tools/</url>
    <content><![CDATA[<h1 id="个人常用工具（软件）"><a href="#个人常用工具（软件）" class="headerlink" title="个人常用工具（软件）"></a>个人常用工具（软件）</h1><h2 id="Chrome插件"><a href="#Chrome插件" class="headerlink" title="Chrome插件"></a>Chrome插件</h2><ul>
<li><a href="https://chrome.google.com/webstore/detail/adblock-plus/cfhdojbkjhnklbpkdaibdccddilifddb?utm_source=chrome-app-launcher-info-dialog">AdBlock</a> 网页广告过滤</li>
<li><a href="https://chrome.google.com/webstore/detail/jsonview/chklaanhfefbnpoihckbnefhakgolnmc?utm_source=chrome-app-launcher-info-dialog">JSONView</a> 格式化查看JSON数据</li>
<li><a href="https://chrome.google.com/webstore/detail/octotree/bkhaagjahfmjljalopjnoealnfndnagc?utm_source=chrome-app-launcher-info-dialog">Octotree</a> Display Github code in tree format<a id="more"></a></li>
<li><a href="https://chrome.google.com/webstore/detail/save-to-pocket/niloccemoadcdkdjlinkgdfekeahmflj?utm_source=chrome-app-launcher-info-dialog">Save to Pocket</a></li>
<li><a href="https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?utm_source=chrome-app-launcher-info-dialog">Vimium</a> 给Chrome添加<code>vim</code>能力</li>
<li>印象笔记<code>阅读</code>和<code>剪藏</code></li>
</ul>
<h2 id="Windows-PC"><a href="#Windows-PC" class="headerlink" title="Windows PC"></a>Windows PC</h2><ul>
<li>Sublime Text3</li>
<li>印象笔记</li>
<li>Everything</li>
<li>Kindle客户端</li>
<li>有道词典(实在离不开)</li>
</ul>
]]></content>
      <tags>
        <tag>积累</tag>
      </tags>
  </entry>
  <entry>
    <title>VIM常用命令</title>
    <url>/post/vim-tips/</url>
    <content><![CDATA[<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>使用的使<a href="https://github.com/spf13/spf13-vim">spf-13</a>的配置，<a href="https://blog.polunzh.com/post/myvimrc/">自定义配置</a></p>
<ul>
<li>重新加载 <code>vimrc</code>: <code>so</code></li>
</ul>
<h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><h4 id="NERDTree"><a href="#NERDTree" class="headerlink" title="NERDTree"></a>NERDTree</h4><ul>
<li>打开vim是自动打开NERDTree</li>
</ul>
<p><code>autocmd vimenter * NERDTree</code></p>
<ul>
<li>打开编辑器时鼠标默认在编辑区域</li>
</ul>
<p><code>autocmd vimenter * wincmd p</code></p>
<ul>
<li>如果打开vim的时候没有指定文件，则自动打开NERDTree</li>
</ul>
<p><code>autocmd StdinReadPre * let s:std_in=1</code><br><code>autocmd VimEnter * if argc() == 0 &amp;&amp; !exists(&quot;s:std_in&quot;) | NERDTree | endif</code></p>
<ul>
<li>如果只剩下一个NERDTree窗口，则关闭vim</li>
</ul>
<p><code>autocmd bufenter * if (winnr(&quot;$&quot;) == 1 &amp;&amp; exists(&quot;b:NERDTree&quot;) &amp;&amp; b:NERDTree.isTabTree()) | q | endif</code></p>
<ul>
<li>快捷键设置</li>
</ul>
<p><code>map &lt;C-b&gt; :NERDTreeToggle&lt;CR&gt;</code></p>
<ul>
<li>忽略文件</li>
</ul>
<p>let NERDTreeIgnore = [‘regex’]</p>
<h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><ul>
<li><code>dd</code> 删除一行</li>
<li><code>dw</code> 删除一个单词，包括单词后的那个空格</li>
<li><code>de</code> 删除一个单词，不包括单词后的那个空格</li>
<li><code>&#123;n&#125;dd</code> 删除n行</li>
<li><code>d$</code> 从光标删除至行尾</li>
<li><code>x</code> 删除光标后的那个单词</li>
</ul>
<h2 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h2><ul>
<li><code>h</code>,<code>j</code>,<code>k</code>,<code>l</code> 基本的方向键</li>
<li><code>e</code> 移动到当前单词的最后一个单词</li>
<li><code>w</code> 移动到下一个单词的开始，不包括下一个单词的第一个字符</li>
<li><code>&#123;n&#125;+&#123;方向键&#125;</code> 向指定的方向键方法的移动<code>n</code>个字符或<code>n</code>行</li>
<li><code>&lt;C-u&gt;</code> 向上滚动半屏</li>
<li><code>&lt;C-d&gt;</code> 向下滚动半屏</li>
<li><code>&lt;C-d&gt;</code> 向下滚动半屏</li>
<li><code>&lt;C-b&gt;</code> 向上滚动一屏</li>
<li><code>&lt;C-f&gt;</code> 向下滚动一屏</li>
<li><code>zz</code> 使当前行位于屏幕中央</li>
<li><code>zt</code> 使当前行位于屏幕顶部</li>
<li><code>zb</code> 使当前行位于屏幕底部</li>
</ul>
]]></content>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>SublimeText3 个人设置及常用插件</title>
    <url>/post/st3settings/</url>
    <content><![CDATA[<p><code>个人使用st3经常使用的配置和插件</code></p>
<h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><ul>
<li><a href="https://packagecontrol.io/packages/Emmet">Emmet</a></li>
<li><a href="https://packagecontrol.io/packages/HTMLBeautify">HtmlBeautify</a></li>
<li><a href="https://packagecontrol.io/packages/JsFormat">JsFormat</a></li>
<li><a href="https://packagecontrol.io/packages/Markdown%20Preview">Markdown Preview</a></li>
<li><a href="https://packagecontrol.io/packages/SideBarEnhancements">SideBarEnhancements</a><a id="more"></a></li>
<li><a href="https://packagecontrol.io/packages/SublimeTmpl">SublimeTmpl</a></li>
<li><a href="https://packagecontrol.io/packages/TrailingSpaces">Trailing Spaces</a></li>
<li><a href="https://packagecontrol.io/packages/AutoPEP8">AutoPeP8</a> 自动格式化Python代码</li>
<li><a href="https://packagecontrol.io/packages/SublimeCodeIntel">SublimeCodeIntel</a></li>
<li><a href="https://packagecontrol.io/packages/ConvertToUTF8">ConvertToUTF8</a></li>
<li><a href="https://packagecontrol.io/packages/SublimeREPL">Sublime​REPL</a></li>
<li><a href="https://packagecontrol.io/packages/IMESupport">IMESupport</a></li>
<li><a href="https://packagecontrol.io/packages/BracketHighlighter">Bracket​Highlighter</a></li>
</ul>
<h3 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h3><ul>
<li><a href="https://packagecontrol.io/packages/Theme%20-%20Flatland">Flatland</a></li>
<li><a href="https://packagecontrol.io/packages/Theme%20-%20Spacegray">Spacegray</a></li>
<li><a href="https://packagecontrol.io/packages/Material%20Theme">Material Theme</a></li>
</ul>
<h3 id="一个主题网站"><a href="#一个主题网站" class="headerlink" title="一个主题网站"></a>一个主题网站</h3><ul>
<li><a href="http://colorsublime.com/">colorsublime</a></li>
</ul>
<h3 id="个人设置-Settings-User"><a href="#个人设置-Settings-User" class="headerlink" title="个人设置(Settings User)"></a>个人设置(Settings User)</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">&quot;caret_style&quot;</span>: <span class="string">&quot;wide&quot;</span>,</span><br><span class="line">	<span class="comment">//&quot;theme&quot;: &quot;Material-Theme-Lighter.sublime-theme&quot;,</span></span><br><span class="line">	<span class="comment">//&quot;color_scheme&quot;: &quot;Packages/Material Theme/schemes/Material-Theme-Lighter.tmTheme&quot;,</span></span><br><span class="line">	<span class="attr">&quot;theme&quot;</span>: <span class="string">&quot;Material-Theme.sublime-theme&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;color_scheme&quot;</span>: <span class="string">&quot;Packages/Material Theme/schemes/Material-Theme.tmTheme&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;default_encoding&quot;</span>: <span class="string">&quot;UTF-8&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;overlay_scroll_bars&quot;</span>: <span class="string">&quot;enabled&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;line_padding_top&quot;</span>: <span class="number">2</span>,</span><br><span class="line">	<span class="attr">&quot;line_padding_bottom&quot;</span>: <span class="number">2</span>,</span><br><span class="line">	<span class="attr">&quot;always_show_minimap_viewport&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="attr">&quot;bold_folder_labels&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="attr">&quot;font_face&quot;</span>: <span class="string">&quot;Consolas&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;font_size&quot;</span>: <span class="number">13</span>,</span><br><span class="line">	<span class="attr">&quot;ignored_packages&quot;</span>:</span><br><span class="line">	[</span><br><span class="line">	],</span><br><span class="line">	<span class="attr">&quot;match_brackets&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="attr">&quot;match_brackets_angle&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="attr">&quot;match_brackets_braces&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="attr">&quot;match_brackets_content&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="attr">&quot;match_brackets_square&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="attr">&quot;save_on_focus_lost&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="attr">&quot;soda_classic_tabs&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="attr">&quot;tab_size&quot;</span>: <span class="number">4</span>,</span><br><span class="line">	<span class="attr">&quot;translate_tabs_to_spaces&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="插件设置"><a href="#插件设置" class="headerlink" title="插件设置"></a>插件设置</h3><h4 id="GitGutter"><a href="#GitGutter" class="headerlink" title="GitGutter"></a>GitGutter</h4><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;non_blocking&quot;</span> : <span class="string">&quot;true&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;live_mode&quot;</span> : <span class="string">&quot;false&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>SublimeText3</tag>
      </tags>
  </entry>
  <entry>
    <title>资源</title>
    <url>/post/good-resources/</url>
    <content><![CDATA[<p>这里是收集的不错的资源，包括 github 上的 repository 和一个觉得不错的博客:</p>
<ul>
<li><a href="http://blog.polunzh.com/post/st3settings/">Sublime Text3 配置相关</a></li>
</ul>
<a id="more"></a>

<h2 id="练级"><a href="#练级" class="headerlink" title="练级"></a>练级</h2><ul>
<li><a href="http://blog.knownsec.com/Knownsec_RD_Checklist/">知道创宇研发技能表</a></li>
</ul>
<h2 id="C-Sharp"><a href="#C-Sharp" class="headerlink" title="C Sharp"></a>C Sharp</h2><ul>
<li><a href="http://www.cnblogs.com/forerunner/p/csls5-1-introduction.html">C#语言规范</a></li>
<li><a href="https://github.com/unruledboy/DotNetStack">.net 技术站</a></li>
<li><a href="https://github.com/MarlabsInc/webapi-angularjs-spa">Asp.Net Web Api + AngularJS WebSite Demo</a></li>
</ul>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><ul>
<li><a href="http://www.crockford.com/">Douglas Crockford</a></li>
<li><a href="http://insights.thoughtworkers.org/functional-javascript/">函数式 JavaScript</a></li>
<li><a href="http://www.nczonline.net/">JavaScript 高级编程作者</a></li>
<li><a href="http://hellobug.github.io/">Hello bug ~</a></li>
<li><a href="https://github.com/lenville/understandinges6">理解 ES6</a></li>
<li><a href="http://babeljs.io/docs/learn-es2015/">Learn ES2015</a></li>
<li><a href="http://jimliu.net/">函数式 JavaScript 相关文章</a></li>
</ul>
<h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><ul>
<li><a href="http://web.jobbole.com/83317/">CSS 最核心的几个概念</a></li>
</ul>
<h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h2><ul>
<li><code>淘宝</code><a href="https://github.com/taobao/nginx-book">nginx-book</a></li>
<li><a href="http://www.evanmiller.org/nginx-modules-guide.html">Emiller’s Guide To Nginx Module Development</a>|<a href="https://code.google.com/archive/p/emillers-guide-to-nginx-module-chn/wikis/NginxModuleDevGuide_CHN.wiki">中文</a></li>
</ul>
<h2 id="AngularJS"><a href="#AngularJS" class="headerlink" title="AngularJS"></a>AngularJS</h2><ul>
<li><a href="http://docs.angularjs.cn/api">文档</a></li>
</ul>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><ul>
<li><a href="http://www.programcreek.com/python/">Python Examples</a></li>
<li><code>Python学习资料</code><a href="http://www.fullstackpython.com/best-python-resources.html">Full Stack Python</a></li>
<li><a href="http://python.jobbole.com/81861/">Vagrant 搭建 Python 开发环境搭建</a></li>
<li><a href="https://github.com/vinta/awesome-python">Awesome Python</a></li>
<li><code>python</code><a href="http://www.itdiffer.com/">老齐的技术博客</a></li>
<li><code>python</code> <code>临时</code> <a href="http://playbear.github.io/">个人技术博客</a></li>
<li><code>书</code><a href="https://automatetheboringstuff.com/">Automate the boring stuff with Python</a></li>
<li><code>Site</code><a href="http://docs.python-guide.org/en/latest/">Python Guide</a></li>
<li><code>书</code><a href="http://book.pythontips.com/en/latest/">Intermediate Python</a></li>
<li><a href="http://woodpecker.org.cn/abyteofpython_cn/chinese/">简明 Python 教程</a></li>
<li>英文版<code>简明Python教程</code><a href="http://www.swaroopch.com/notes/python/">A byte of Python</a></li>
<li><a href="http://learnpythonthehardway.org/book/">Learn Python The Hard Way</a></li>
<li><a href="http://woodpecker.org.cn/diveintopython/">深入 Python :Dive Into Python 中文版</a></li>
<li><a href="http://python.jobbole.com/81997/">用 python 爬虫抓站的一些技巧总结</a></li>
<li><a href="http://www.wklken.me/">个人博客 0</a> 这里不只是有 python,还有其它技术,比如 vim</li>
<li><a href="http://inventwithpython.com/chapters/">Invent with Python</a></li>
<li><a href="https://pymotw.com/2/contents.html">Python Module of the Week</a></li>
</ul>
<h2 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h2><ul>
<li><a href="http://vimcolors.com/">Vim theme</a></li>
<li><a href="https://github.com/wsdjeg/vim-galore-zh_cn">https://github.com/wsdjeg/vim-galore-zh_cn</a></li>
<li><a href="https://github.com/vim-china/issues">讨论区</a></li>
<li><a href="https://github.com/vim-china/hello-vim">Vim 学习指南</a></li>
<li><a href="https://github.com/wsdjeg/vim-galore-zh_cn">Vim 从入门到精通</a></li>
<li><a href="https://github.com/vim-china/vim-script-style-guide">Vim 脚本语法规范</a></li>
<li><a href="https://github.com/vim-china/reading-vimrc">Vimrc 读书会</a></li>
<li><a href="https://github.com/lymslive/vimllearn">Vim脚本语法指北</a></li>
<li><a href="https://github.com/skywind3000/awesome-cheatsheets/blob/master/editors/vim.txt">Vim 常用命令检索表</a></li>
</ul>
<h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><ul>
<li><a href="http://jingxuan.io/progit/">Pro Git(中文版)</a></li>
<li><code>应该看</code><a href="http://www.codeceo.com/article/git-learn-deeply.html">深入理解学习 Git 工作流</a></li>
<li><code>应该看</code><a href="https://www.atlassian.com/git/tutorials/syncing/">教程</a></li>
<li><code>应该看</code><a href="http://gitbook.liuhui998.com/index.html">Git Community Book</a></li>
<li><code>应该看</code><a href="http://github.phodal.com/">Github 漫游指南</a></li>
</ul>
<h2 id="REST-full"><a href="#REST-full" class="headerlink" title="REST-full"></a>REST-full</h2><ul>
<li><a href="http://redrata.com/restful-uri-design/">REST-ful URI design</a></li>
<li><a href="http://mp.weixin.qq.com/s?__biz=MzAwNjMxMTA5Mw==&mid=212973684&idx=1&sn=53927df736ec229f0903ed294107ae52&scene=5#rd">RESTful API 设计最佳实践</a></li>
<li><a href="http://www.cnblogs.com/skylar/p/express-koa-restfull-api.html">Node.js 实现 RESTful api,express or koa?</a></li>
</ul>
<h2 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h2><ul>
<li><a href="https://github.com/justinyhuang/the-little-mongodb-book-cn">The-little-mongodb-book</a></li>
</ul>
<h2 id="SQLite"><a href="#SQLite" class="headerlink" title="SQLite"></a>SQLite</h2><ul>
<li><a href="http://blog.jobbole.com/89949/">SQLite 这么娇小可爱，不多了解点都不行啊</a></li>
</ul>
<h2 id="NodeJS"><a href="#NodeJS" class="headerlink" title="NodeJS"></a>NodeJS</h2><ul>
<li><a href="http://nodeschool.io/">NodeSchool</a></li>
<li><a href="https://stackoverflow.com/questions/2353818/how-do-i-get-started-with-node-js">How do I get started with Node.js [closed]</a></li>
</ul>
<h2 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h2><h3 id="PowerShell"><a href="#PowerShell" class="headerlink" title="PowerShell"></a>PowerShell</h3><ul>
<li><a href="https://www.secpulse.com/archives/55893.html">入门</a></li>
<li><a href="http://www.pstips.net/">PowerShell 中文博客</a></li>
</ul>
<h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><ul>
<li><a href="http://www.sitepoint.com/introduction-gulp-js/">An Introduction to Gulp.js</a></li>
<li><a href="http://f2er.club/">前端资料</a></li>
<li><a href="https://github.com/unruledboy/WebFrontEndStack">Web 前端技术栈</a></li>
<li><a href="https://github.com/bolasblack/http-api-guide">HTTP 接口设计指北</a></li>
<li><a href="https://github.com/net-commons/common-logging.git">日志 common-logging</a></li>
<li><a href="https://github.com/lisposter/frontend-books">前端书籍</a></li>
<li><a href="https://github.com/AutoMapper/AutoMapper/wiki">AutoMapper wiki</a></li>
<li><a href="http://color.hailpixel.com/">配色</a></li>
<li><a href="http://algs4.cs.princeton.edu/home/">《算法》第四版</a></li>
<li><a href="http://jingxuan.io/markdown/">Markdown</a></li>
<li><code>待读</code><a href="http://blog.jobbole.com/75321/">什么是堆和栈</a></li>
<li><a href="http://www.allitebooks.com/">电子书</a></li>
<li><a href="http://codepancake.com/">有意思的编程网站</a></li>
<li><code>前端</code><a href="https://github.com/qiu-deqing/FE-learning">前端入门方法</a></li>
</ul>
<h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><ul>
<li><a href="https://github.com/jkbrzt/httpie">httpie</a></li>
</ul>
<h2 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h2><ul>
<li><code>喜欢</code><a href="http://yanyiwu.com/">大厨的日常</a></li>
<li><a href="http://www.trueeyu.com/">小鳄的笔记本</a></li>
</ul>
<h2 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h2><h3 id="2018-07-12-14-01-33"><a href="#2018-07-12-14-01-33" class="headerlink" title="2018-07-12 14:01:33"></a>2018-07-12 14:01:33</h3><p>更新<code>博客</code></p>
<h3 id="2018-07-10-15-07-25"><a href="#2018-07-10-15-07-25" class="headerlink" title="2018-07-10 15:07:25"></a>2018-07-10 15:07:25</h3><ul>
<li>更新了<code>VIM</code>部分</li>
<li>调整了一些格式</li>
</ul>
]]></content>
      <tags>
        <tag>积累</tag>
      </tags>
  </entry>
</search>
